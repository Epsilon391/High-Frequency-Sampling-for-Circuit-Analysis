
change_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005798  08005798  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a0  080057a0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000068  08005810  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08005810  000074dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e67a  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002494  00000000  00000000  0001570b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00017ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  00018960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018be3  00000000  00000000  00019418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081a  00000000  00000000  00031ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f604  00000000  00000000  00042815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  000d1e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d5f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080055dc 	.word	0x080055dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080055dc 	.word	0x080055dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	@ 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	@ 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	@ 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	@ 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_f2uiz>:
 8000fe0:	0042      	lsls	r2, r0, #1
 8000fe2:	d20e      	bcs.n	8001002 <__aeabi_f2uiz+0x22>
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fe8:	d30b      	bcc.n	8001002 <__aeabi_f2uiz+0x22>
 8000fea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d409      	bmi.n	8001008 <__aeabi_f2uiz+0x28>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ffc:	fa23 f002 	lsr.w	r0, r3, r2
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2uiz+0x32>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d102      	bne.n	8001018 <__aeabi_f2uiz+0x38>
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	4770      	bx	lr
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <adc_uart_Init>:
/*
 * Send Welcome message through UART with directions
 * Calculates sample rate, sample period, and sets the timer frequency
 */
void adc_uart_Init()
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b092      	sub	sp, #72	@ 0x48
 8001024:	af00      	add	r7, sp, #0
	uint8_t msg[65] = "Welcome, please enter 's' to receive the data in CSV format: \n\r";
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <adc_uart_Init+0x98>)
 8001028:	1d3c      	adds	r4, r7, #4
 800102a:	461d      	mov	r5, r3
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    // Print Original Message to Serial Monitor
	HAL_UART_Transmit(&huart2, msg, 65, 1000);
 8001046:	1d39      	adds	r1, r7, #4
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	2241      	movs	r2, #65	@ 0x41
 800104e:	481b      	ldr	r0, [pc, #108]	@ (80010bc <adc_uart_Init+0x9c>)
 8001050:	f002 ffec 	bl	800402c <HAL_UART_Transmit>

	// Calculations for the sample rate, and sample period in us
	// Sets the timer frequency based off of this
    sampRate = (16000 * 1000) / tdiv;
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <adc_uart_Init+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	481a      	ldr	r0, [pc, #104]	@ (80010c4 <adc_uart_Init+0xa4>)
 800105c:	f7ff fe88 	bl	8000d70 <__aeabi_fdiv>
 8001060:	4603      	mov	r3, r0
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffbc 	bl	8000fe0 <__aeabi_f2uiz>
 8001068:	4603      	mov	r3, r0
 800106a:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <adc_uart_Init+0xa8>)
 800106c:	6013      	str	r3, [r2, #0]
    sampPer = tdiv / 16.0;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <adc_uart_Init+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe7a 	bl	8000d70 <__aeabi_fdiv>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <adc_uart_Init+0xac>)
 8001082:	601a      	str	r2, [r3, #0]
    setTimerFreq(sampRate);
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <adc_uart_Init+0xa8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f845 	bl	8001118 <setTimerFreq>

    // Recieve from uart based on a interrupt
    HAL_UART_Receive_IT(&huart2, uartBuf, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	490f      	ldr	r1, [pc, #60]	@ (80010d0 <adc_uart_Init+0xb0>)
 8001092:	480a      	ldr	r0, [pc, #40]	@ (80010bc <adc_uart_Init+0x9c>)
 8001094:	f003 f84d 	bl	8004132 <HAL_UART_Receive_IT>


    HAL_TIM_Base_Start(&htim3);                          // Start the timebase timer
 8001098:	480e      	ldr	r0, [pc, #56]	@ (80010d4 <adc_uart_Init+0xb4>)
 800109a:	f002 fd0f 	bl	8003abc <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adcBuf, 200); // Start the ADC
 800109e:	22c8      	movs	r2, #200	@ 0xc8
 80010a0:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <adc_uart_Init+0xb8>)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <adc_uart_Init+0xbc>)
 80010a4:	f000 ffd6 	bl	8002054 <HAL_ADC_Start_DMA>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f001 fbb0 	bl	800280e <HAL_NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3748      	adds	r7, #72	@ 0x48
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	080055f4 	.word	0x080055f4
 80010bc:	200002fc 	.word	0x200002fc
 80010c0:	20000008 	.word	0x20000008
 80010c4:	4b742400 	.word	0x4b742400
 80010c8:	20000220 	.word	0x20000220
 80010cc:	20000224 	.word	0x20000224
 80010d0:	20000230 	.word	0x20000230
 80010d4:	200002b4 	.word	0x200002b4
 80010d8:	20000084 	.word	0x20000084
 80010dc:	20000240 	.word	0x20000240

080010e0 <transferLoop>:

// This runs in an infinite loop
void transferLoop()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    if (finishedConversion) // We finished aquiring one buffer
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <transferLoop+0x2c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <transferLoop+0x26>
    {
        // Find the trigger point
        findTrigger();
 80010ee:	f000 f82b 	bl	8001148 <findTrigger>
        //if (trigged)
            //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

        // Send the data to the UART if requested
        send_Data();
 80010f2:	f000 fc65 	bl	80019c0 <send_Data>
        // Reset
        //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
        //uint8_t msg[65] = "Welcome, please enter 's' to receive the data in CSV format: \n\r";
        // Print Original Message to Serial Monitor
        //HAL_UART_Transmit(&huart2, msg, 65, 1000);
        finishedConversion = 0;
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <transferLoop+0x2c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
        HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adcBuf, BUFFER_LEN);
 80010fc:	22c8      	movs	r2, #200	@ 0xc8
 80010fe:	4904      	ldr	r1, [pc, #16]	@ (8001110 <transferLoop+0x30>)
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <transferLoop+0x34>)
 8001102:	f000 ffa7 	bl	8002054 <HAL_ADC_Start_DMA>
    }
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000214 	.word	0x20000214
 8001110:	20000084 	.word	0x20000084
 8001114:	20000240 	.word	0x20000240

08001118 <setTimerFreq>:

// This sets the sampling rate
void setTimerFreq(uint32_t freq)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    uint16_t arr = (SYSCLK_FREQ / ((CLOCKTIM_PRESC + 1) * freq)) - 1;
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <setTimerFreq+0x28>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	3b01      	subs	r3, #1
 800112c:	81fb      	strh	r3, [r7, #14]
    htim3.Instance->ARR = arr;
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <setTimerFreq+0x2c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	89fa      	ldrh	r2, [r7, #14]
 8001134:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	044aa200 	.word	0x044aa200
 8001144:	200002b4 	.word	0x200002b4

08001148 <findTrigger>:

// This function finds the trigger point and also computes the frequency of thge signal
void findTrigger()
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
    int trigLevel = (4096.0 * (trigVoltage / (2.0 * atten) + 1.65)) / 3.3; // ADC level at which we should trigger
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <findTrigger+0x178>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f968 	bl	8000428 <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b59      	ldr	r3, [pc, #356]	@ (80012c4 <findTrigger+0x17c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f94f 	bl	8000404 <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f7fe ffff 	bl	800016c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fad9 	bl	800072c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a34b      	add	r3, pc, #300	@ (adr r3, 80012b0 <findTrigger+0x168>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7fe fff0 	bl	800016c <__adddf3>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <findTrigger+0x180>)
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a344      	add	r3, pc, #272	@ (adr r3, 80012b8 <findTrigger+0x170>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fabe 	bl	800072c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fba0 	bl	80008fc <__aeabi_d2iz>
 80011bc:	4603      	mov	r3, r0
 80011be:	607b      	str	r3, [r7, #4]
    int trigPoint2;                                                        // another trigger point, this will help us determine the period of the signal

    trigPoint = 0;
 80011c0:	4b42      	ldr	r3, [pc, #264]	@ (80012cc <findTrigger+0x184>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    trigged = 0;
 80011c6:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <findTrigger+0x188>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    measuredFreq = 0;
 80011cc:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <findTrigger+0x18c>)
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

    // The trigged variable will be 0 if we're not triggering, 1 if we only found 1 trigger point and 2 if we have at least two trigger points

    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	e03c      	b.n	8001254 <findTrigger+0x10c>
        if ((trig == RISING && adcBuf[i] >= trigLevel && adcBuf[i - 1] < trigLevel) || (trig == FALLING && adcBuf[i] <= trigLevel && adcBuf[i - 1] > trigLevel))
 80011da:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <findTrigger+0x190>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d110      	bne.n	8001204 <findTrigger+0xbc>
 80011e2:	4a3e      	ldr	r2, [pc, #248]	@ (80012dc <findTrigger+0x194>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4293      	cmp	r3, r2
 80011f0:	dc08      	bgt.n	8001204 <findTrigger+0xbc>
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4a39      	ldr	r2, [pc, #228]	@ (80012dc <findTrigger+0x194>)
 80011f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4293      	cmp	r3, r2
 8001202:	dc14      	bgt.n	800122e <findTrigger+0xe6>
 8001204:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <findTrigger+0x190>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d120      	bne.n	800124e <findTrigger+0x106>
 800120c:	4a33      	ldr	r2, [pc, #204]	@ (80012dc <findTrigger+0x194>)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4293      	cmp	r3, r2
 800121a:	db18      	blt.n	800124e <findTrigger+0x106>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3b01      	subs	r3, #1
 8001220:	4a2e      	ldr	r2, [pc, #184]	@ (80012dc <findTrigger+0x194>)
 8001222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4293      	cmp	r3, r2
 800122c:	da0f      	bge.n	800124e <findTrigger+0x106>
        {
            if (!trigged) // Looking for the first trigger point
 800122e:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <findTrigger+0x188>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <findTrigger+0xfc>
            {
                trigPoint = i;
 8001236:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <findTrigger+0x184>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	6013      	str	r3, [r2, #0]
                trigged = 1;
 800123c:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <findTrigger+0x188>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e004      	b.n	800124e <findTrigger+0x106>
            }
            else // Looking for the second one
            {
                trigPoint2 = i;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60fb      	str	r3, [r7, #12]
                trigged = 2;
 8001248:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <findTrigger+0x188>)
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3301      	adds	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b63      	cmp	r3, #99	@ 0x63
 8001258:	dc03      	bgt.n	8001262 <findTrigger+0x11a>
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <findTrigger+0x188>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d1bb      	bne.n	80011da <findTrigger+0x92>
            }
        }

    if (trigged == 2) // If we found at least two trigger points
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <findTrigger+0x188>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d11b      	bne.n	80012a2 <findTrigger+0x15a>
    {
        sigPer = sampPer * (trigPoint2 - trigPoint); // we compute the period of the signal in uS
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <findTrigger+0x184>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fc74 	bl	8000b60 <__aeabi_i2f>
 8001278:	4602      	mov	r2, r0
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <findTrigger+0x198>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f7ff fcc1 	bl	8000c08 <__aeabi_fmul>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <findTrigger+0x19c>)
 800128c:	601a      	str	r2, [r3, #0]
        measuredFreq = 1000000.0 / sigPer;           // and then we convert it into frequency, in Hz
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <findTrigger+0x19c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <findTrigger+0x1a0>)
 8001296:	f7ff fd6b 	bl	8000d70 <__aeabi_fdiv>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <findTrigger+0x18c>)
 80012a0:	601a      	str	r2, [r3, #0]
    }
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bdb0      	pop	{r4, r5, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	66666666 	.word	0x66666666
 80012b4:	3ffa6666 	.word	0x3ffa6666
 80012b8:	66666666 	.word	0x66666666
 80012bc:	400a6666 	.word	0x400a6666
 80012c0:	2000021c 	.word	0x2000021c
 80012c4:	20000000 	.word	0x20000000
 80012c8:	40b00000 	.word	0x40b00000
 80012cc:	20000218 	.word	0x20000218
 80012d0:	20000215 	.word	0x20000215
 80012d4:	20000228 	.word	0x20000228
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000084 	.word	0x20000084
 80012e0:	20000224 	.word	0x20000224
 80012e4:	2000022c 	.word	0x2000022c
 80012e8:	49742400 	.word	0x49742400

080012ec <adcToVoltage>:

// Convert ADC value to volts
float adcToVoltage(uint16_t samp)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
    //return atten * 2 * (((3.3 * samp) / 4096.0) - 1.65);
	return samp;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc2d 	bl	8000b58 <__aeabi_ui2f>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_ADC_ConvCpltCallback>:

// This runs after the ADC has finished sampling one whole buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    finishedConversion = 1;
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x18>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]

}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000214 	.word	0x20000214

08001324 <HAL_UART_RxCpltCallback>:

// This runs after receiving a character over the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	extern uint8_t outputFlag;
    if(uartBuf[0] == 's' || uartBuf[0] == 'S')
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_UART_RxCpltCallback+0x30>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b73      	cmp	r3, #115	@ 0x73
 8001332:	d003      	beq.n	800133c <HAL_UART_RxCpltCallback+0x18>
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_UART_RxCpltCallback+0x30>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b53      	cmp	r3, #83	@ 0x53
 800133a:	d102      	bne.n	8001342 <HAL_UART_RxCpltCallback+0x1e>
        outputFlag = 1;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_UART_RxCpltCallback+0x34>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, uartBuf, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	4903      	ldr	r1, [pc, #12]	@ (8001354 <HAL_UART_RxCpltCallback+0x30>)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_UART_RxCpltCallback+0x38>)
 8001348:	f002 fef3 	bl	8004132 <HAL_UART_Receive_IT>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000230 	.word	0x20000230
 8001358:	2000038c 	.word	0x2000038c
 800135c:	200002fc 	.word	0x200002fc

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001364:	f000 fd18 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 f810 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f000 f946 	bl	80015fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001370:	f000 f91e 	bl	80015b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001374:	f000 f8f2 	bl	800155c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001378:	f000 f864 	bl	8001444 <MX_ADC1_Init>
  MX_TIM3_Init();
 800137c:	f000 f8a0 	bl	80014c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  adc_uart_Init();
 8001380:	f7ff fe4e 	bl	8001020 <adc_uart_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // run the main loop
	  transferLoop();
 8001384:	f7ff feac 	bl	80010e0 <transferLoop>
  {
 8001388:	bf00      	nop
 800138a:	e7fb      	b.n	8001384 <main+0x24>

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001396:	2228      	movs	r2, #40	@ 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fc8e 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ca:	2301      	movs	r3, #1
 80013cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80013d8:	f44f 13a0 	mov.w	r3, #1310720	@ 0x140000
 80013dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fe54 	bl	8003090 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ee:	f000 f927 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001402:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f8c0 	bl	8003594 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800141a:	f000 f911 	bl	8001640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800141e:	2302      	movs	r3, #2
 8001420:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001422:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fa40 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001436:	f000 f903 	bl	8001640 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	@ 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_ADC1_Init+0x74>)
 8001456:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <MX_ADC1_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_ADC1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_ADC1_Init+0x74>)
 8001462:	2201      	movs	r2, #1
 8001464:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_ADC1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_ADC1_Init+0x74>)
 800146e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001472:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_ADC1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_ADC1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001480:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_ADC1_Init+0x74>)
 8001482:	f000 fd0f 	bl	8001ea4 <HAL_ADC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 f8d8 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_ADC1_Init+0x74>)
 80014a2:	f000 fec7 	bl	8002234 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014ac:	f000 f8c8 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000240 	.word	0x20000240
 80014bc:	40012400 	.word	0x40012400

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014de:	4a1e      	ldr	r2, [pc, #120]	@ (8001558 <MX_TIM3_Init+0x98>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_TIM3_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001502:	4814      	ldr	r0, [pc, #80]	@ (8001554 <MX_TIM3_Init+0x94>)
 8001504:	f002 fa8a 	bl	8003a1c <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f897 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM3_Init+0x94>)
 8001520:	f002 fb16 	bl	8003b50 <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f889 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <MX_TIM3_Init+0x94>)
 800153c:	f002 fcc8 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 f87b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002b4 	.word	0x200002b4
 8001558:	40000400 	.word	0x40000400

0800155c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_USART2_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001594:	f002 fcfa 	bl	8003f8c <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f84f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002fc 	.word	0x200002fc
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <MX_DMA_Init+0x48>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a0f      	ldr	r2, [pc, #60]	@ (80015f8 <MX_DMA_Init+0x48>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <MX_DMA_Init+0x48>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	200b      	movs	r0, #11
 80015d4:	f001 f8ff 	bl	80027d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015d8:	200b      	movs	r0, #11
 80015da:	f001 f918 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2010      	movs	r0, #16
 80015e4:	f001 f8f7 	bl	80027d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80015e8:	2010      	movs	r0, #16
 80015ea:	f001 f910 	bl	800280e <HAL_NVIC_EnableIRQ>

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_GPIO_Init+0x40>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <MX_GPIO_Init+0x40>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_GPIO_Init+0x40>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_GPIO_Init+0x40>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a07      	ldr	r2, [pc, #28]	@ (800163c <MX_GPIO_Init+0x40>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <MX_GPIO_Init+0x40>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <Error_Handler+0x8>

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_MspInit+0x5c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_MspInit+0x60>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_MspInit+0x60>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000

080016b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a28      	ldr	r2, [pc, #160]	@ (800176c <HAL_ADC_MspInit+0xbc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d149      	bne.n	8001764 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <HAL_ADC_MspInit+0xc0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001700:	2302      	movs	r3, #2
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001704:	2303      	movs	r3, #3
 8001706:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	4819      	ldr	r0, [pc, #100]	@ (8001774 <HAL_ADC_MspInit+0xc4>)
 8001710:	f001 fb3a 	bl	8002d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001716:	4a19      	ldr	r2, [pc, #100]	@ (800177c <HAL_ADC_MspInit+0xcc>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 800172e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001732:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001734:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001748:	480b      	ldr	r0, [pc, #44]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 800174a:	f001 f87b 	bl	8002844 <HAL_DMA_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001754:	f7ff ff74 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 800175c:	621a      	str	r2, [r3, #32]
 800175e:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_ADC_MspInit+0xc8>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40012400 	.word	0x40012400
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800
 8001778:	20000270 	.word	0x20000270
 800177c:	40020008 	.word	0x40020008

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <HAL_TIM_Base_MspInit+0x34>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10b      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_TIM_Base_MspInit+0x38>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_TIM_Base_MspInit+0x38>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_TIM_Base_MspInit+0x38>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40000400 	.word	0x40000400
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a32      	ldr	r2, [pc, #200]	@ (80018a0 <HAL_UART_MspInit+0xe4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d15d      	bne.n	8001898 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a30      	ldr	r2, [pc, #192]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a2a      	ldr	r2, [pc, #168]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b28      	ldr	r3, [pc, #160]	@ (80018a4 <HAL_UART_MspInit+0xe8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180c:	2304      	movs	r3, #4
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4822      	ldr	r0, [pc, #136]	@ (80018a8 <HAL_UART_MspInit+0xec>)
 8001820:	f001 fab2 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001824:	2308      	movs	r3, #8
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	481c      	ldr	r0, [pc, #112]	@ (80018a8 <HAL_UART_MspInit+0xec>)
 8001838:	f001 faa6 	bl	8002d88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_UART_MspInit+0xf4>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001862:	2220      	movs	r2, #32
 8001864:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800186c:	480f      	ldr	r0, [pc, #60]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 800186e:	f000 ffe9 	bl	8002844 <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001878:	f7ff fee2 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001880:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_UART_MspInit+0xf0>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2026      	movs	r0, #38	@ 0x26
 800188e:	f000 ffa2 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001892:	2026      	movs	r0, #38	@ 0x26
 8001894:	f000 ffbb 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004400 	.word	0x40004400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	20000344 	.word	0x20000344
 80018b0:	4002006c 	.word	0x4002006c

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <NMI_Handler+0x4>

080018bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <MemManage_Handler+0x4>

080018cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <UsageFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 fa8e 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Channel1_IRQHandler+0x10>)
 8001912:	f001 f905 	bl	8002b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000270 	.word	0x20000270

08001920 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA1_Channel6_IRQHandler+0x10>)
 8001926:	f001 f8fb 	bl	8002b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000344 	.word	0x20000344

08001934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <USART2_IRQHandler+0x10>)
 800193a:	f002 fc1f 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002fc 	.word	0x200002fc

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f003 f9a8 	bl	8004ccc <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20005000 	.word	0x20005000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000388 	.word	0x20000388
 80019b0:	200004e0 	.word	0x200004e0

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <send_Data>:
volatile uint8_t outputFlag = 0; // whether or not we should output data to the UART

extern UART_HandleTypeDef huart2;

void send_Data()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if (outputFlag) // If the computer requested data, we send it.
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <send_Data+0x24>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <send_Data+0x20>
	{
		outputCSV(outputFlag);
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <send_Data+0x24>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f823 	bl	8001a20 <outputCSV>
		outputFlag = 0;
 80019da:	4b02      	ldr	r3, [pc, #8]	@ (80019e4 <send_Data+0x24>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	}
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000038c 	.word	0x2000038c

080019e8 <outputSerial>:

/*
 * Figure out what all of this means
 */
void outputSerial(char s[], uint8_t o)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
    switch (o)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10b      	bne.n	8001a12 <outputSerial+0x2a>
    {
    case 1:
        HAL_UART_Transmit(&huart2, s, strlen(s), HAL_MAX_DELAY);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fba8 	bl	8000150 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <outputSerial+0x34>)
 8001a0c:	f002 fb0e 	bl	800402c <HAL_UART_Transmit>
        break;
 8001a10:	e000      	b.n	8001a14 <outputSerial+0x2c>
    default:
        break;
 8001a12:	bf00      	nop
    }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200002fc 	.word	0x200002fc

08001a20 <outputCSV>:
// This function dumps the captured waveform as TekScope-compatible CSV data
/*
 *
 */
void outputCSV(uint8_t o)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b092      	sub	sp, #72	@ 0x48
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
    char st[10];
    char s1[10];
    uint8_t buffer[30] = "";
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	831a      	strh	r2, [r3, #24]

    sprintf(buffer, "\033[2J\033[H\033[3J");
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4974      	ldr	r1, [pc, #464]	@ (8001c18 <outputCSV+0x1f8>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f917 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ffc6 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Model,TekscopeSW\n\r");
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	496e      	ldr	r1, [pc, #440]	@ (8001c1c <outputCSV+0x1fc>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 f90a 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ffb9 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Label,CH1\n\r");
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4969      	ldr	r1, [pc, #420]	@ (8001c20 <outputCSV+0x200>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 f8fd 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffac 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Waveform Type,ANALOG\n\r");
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4963      	ldr	r1, [pc, #396]	@ (8001c24 <outputCSV+0x204>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f8f0 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff9f 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Horizontal Units,s\n\r");
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	495e      	ldr	r1, [pc, #376]	@ (8001c28 <outputCSV+0x208>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 f8e3 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff92 	bl	80019e8 <outputSerial>

    printFloat(sampPer, 2, st);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	@ (8001c2c <outputCSV+0x20c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f8c2 	bl	8001c58 <printFloat>
    sprintf(buffer, "Sample Interval,%sE-06\n\r", st);
 8001ad4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	4954      	ldr	r1, [pc, #336]	@ (8001c30 <outputCSV+0x210>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 f8cc 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff7b 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Record Length,%d\n\r", BUFFER_LEN);
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	22c8      	movs	r2, #200	@ 0xc8
 8001af8:	494e      	ldr	r1, [pc, #312]	@ (8001c34 <outputCSV+0x214>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 f8be 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff6d 	bl	80019e8 <outputSerial>

    sprintf(buffer, "Zero Index,%d\n\r", trigPoint);
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <outputCSV+0x218>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4949      	ldr	r1, [pc, #292]	@ (8001c3c <outputCSV+0x21c>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f8af 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff5e 	bl	80019e8 <outputSerial>
    HAL_Delay(5);
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f000 f995 	bl	8001e5c <HAL_Delay>

    sprintf(buffer, "Vertical Units,V\n\r");
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4942      	ldr	r1, [pc, #264]	@ (8001c40 <outputCSV+0x220>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f89f 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff4e 	bl	80019e8 <outputSerial>

    sprintf(buffer, ",\n\rLabels,\n\r");
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	493c      	ldr	r1, [pc, #240]	@ (8001c44 <outputCSV+0x224>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f892 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff41 	bl	80019e8 <outputSerial>

    sprintf(buffer, "TIME,CH1\n\r");
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <outputCSV+0x228>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f885 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff34 	bl	80019e8 <outputSerial>

    for (int i = 0; i < BUFFER_LEN; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b84:	e033      	b.n	8001bee <outputCSV+0x1ce>
    {
        float voltage = adcToVoltage(adcBuf[i]);
 8001b86:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <outputCSV+0x22c>)
 8001b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbac 	bl	80012ec <adcToVoltage>
 8001b94:	6438      	str	r0, [r7, #64]	@ 0x40
        printFloat(voltage, 1, st);
 8001b96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001ba0:	f000 f85a 	bl	8001c58 <printFloat>
        printFloat((float)i * sampPer, 3, s1);
 8001ba4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ba6:	f7fe ffdb 	bl	8000b60 <__aeabi_i2f>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <outputCSV+0x20c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff f828 	bl	8000c08 <__aeabi_fmul>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	f000 f848 	bl	8001c58 <printFloat>
        sprintf(buffer, "%sE-06,%s\n\r", s1, st);
 8001bc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bcc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001bd0:	f107 0008 	add.w	r0, r7, #8
 8001bd4:	491e      	ldr	r1, [pc, #120]	@ (8001c50 <outputCSV+0x230>)
 8001bd6:	f003 f851 	bl	8004c7c <siprintf>
        outputSerial(buffer, o);
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff00 	bl	80019e8 <outputSerial>
    for (int i = 0; i < BUFFER_LEN; i++)
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	3301      	adds	r3, #1
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bf2:	ddc8      	ble.n	8001b86 <outputCSV+0x166>
    }
    sprintf(buffer, "Completed Transfer.\n\r");
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4916      	ldr	r1, [pc, #88]	@ (8001c54 <outputCSV+0x234>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f83e 	bl	8004c7c <siprintf>
    outputSerial(buffer, o);
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff feed 	bl	80019e8 <outputSerial>
}
 8001c0e:	bf00      	nop
 8001c10:	3748      	adds	r7, #72	@ 0x48
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08005638 	.word	0x08005638
 8001c1c:	08005644 	.word	0x08005644
 8001c20:	08005658 	.word	0x08005658
 8001c24:	08005664 	.word	0x08005664
 8001c28:	0800567c 	.word	0x0800567c
 8001c2c:	20000224 	.word	0x20000224
 8001c30:	08005694 	.word	0x08005694
 8001c34:	080056b0 	.word	0x080056b0
 8001c38:	20000218 	.word	0x20000218
 8001c3c:	080056c4 	.word	0x080056c4
 8001c40:	080056d4 	.word	0x080056d4
 8001c44:	080056e8 	.word	0x080056e8
 8001c48:	080056f8 	.word	0x080056f8
 8001c4c:	20000084 	.word	0x20000084
 8001c50:	08005704 	.word	0x08005704
 8001c54:	08005710 	.word	0x08005710

08001c58 <printFloat>:


void printFloat(float v, int decimalDigits, char s[])
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint8_t neg = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  if (v < 0)
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff f969 	bl	8000f44 <__aeabi_fcmplt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <printFloat+0x58>
  {
    neg = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
    v = v - (2.0 * v);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7fe fbd3 	bl	8000428 <__aeabi_f2d>
 8001c82:	4604      	mov	r4, r0
 8001c84:	460d      	mov	r5, r1
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7fe fbce 	bl	8000428 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	f7fe fa6c 	bl	800016c <__adddf3>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fa64 	bl	8000168 <__aeabi_dsub>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fe50 	bl	800094c <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]
  }
  int i = 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
  int intPart, fractPart;
  for (; decimalDigits != 0; i *= 10, decimalDigits--)
 8001cb4:	e008      	b.n	8001cc8 <printFloat+0x70>
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f3      	bne.n	8001cb6 <printFloat+0x5e>
    ;
  intPart = (int)v;
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff f960 	bl	8000f94 <__aeabi_f2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]
  fractPart = (int)((v - (float)(int)v) * i);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff f95b 	bl	8000f94 <__aeabi_f2iz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ff3d 	bl	8000b60 <__aeabi_i2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7fe fe82 	bl	80009f4 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	69b8      	ldr	r0, [r7, #24]
 8001cf6:	f7fe ff33 	bl	8000b60 <__aeabi_i2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7fe ff82 	bl	8000c08 <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f944 	bl	8000f94 <__aeabi_f2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	617b      	str	r3, [r7, #20]
  if (fractPart < 0)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da02      	bge.n	8001d1c <printFloat+0xc4>
    fractPart *= -1;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	425b      	negs	r3, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  if (neg)
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <printFloat+0xd8>
    sprintf(s, "-%i.%i", intPart, fractPart);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <printFloat+0xec>)
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f002 ffa7 	bl	8004c7c <siprintf>
  else
    sprintf(s, "%i.%i", intPart, fractPart);
}
 8001d2e:	e005      	b.n	8001d3c <printFloat+0xe4>
    sprintf(s, "%i.%i", intPart, fractPart);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <printFloat+0xf0>)
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f002 ffa0 	bl	8004c7c <siprintf>
}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	08005728 	.word	0x08005728
 8001d48:	08005730 	.word	0x08005730

08001d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d4c:	f7ff fe32 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d50:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d52:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d54:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d68:	4c09      	ldr	r4, [pc, #36]	@ (8001d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d76:	f002 ffaf 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7a:	f7ff faf1 	bl	8001360 <main>
  bx lr
 8001d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d88:	080057a8 	.word	0x080057a8
  ldr r2, =_sbss
 8001d8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d90:	200004dc 	.word	0x200004dc

08001d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_Init+0x28>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_Init+0x28>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 fd09 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fc4a 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fd21 	bl	800282a <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 fce9 	bl	80027d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	20000010 	.word	0x20000010

08001e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x1c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a03      	ldr	r2, [pc, #12]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000014 	.word	0x20000014
 8001e44:	20000390 	.word	0x20000390

08001e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b02      	ldr	r3, [pc, #8]	@ (8001e58 <HAL_GetTick+0x10>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000390 	.word	0x20000390

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffe0 	bl	8001e48 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000014 	.word	0x20000014

08001ea4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0be      	b.n	8002044 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fbe4 	bl	80016b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 faf5 	bl	80024d8 <ADC_ConversionStop_Disable>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8099 	bne.w	8002032 <HAL_ADC_Init+0x18e>
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8095 	bne.w	8002032 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	f043 0202 	orr.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7b1b      	ldrb	r3, [r3, #12]
 8001f2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_Init+0xa2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_ADC_Init+0xa8>
 8001f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4a:	e000      	b.n	8001f4e <HAL_ADC_Init+0xaa>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7d1b      	ldrb	r3, [r3, #20]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d119      	bne.n	8001f90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	035a      	lsls	r2, r3, #13
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e00b      	b.n	8001f90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_ADC_Init+0x1a8>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fc0:	d003      	beq.n	8001fca <HAL_ADC_Init+0x126>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d104      	bne.n	8001fd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	051b      	lsls	r3, r3, #20
 8001fd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_ADC_Init+0x1ac>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d10b      	bne.n	8002010 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800200e:	e018      	b.n	8002042 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	f023 0312 	bic.w	r3, r3, #18
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	ffe1f7fd 	.word	0xffe1f7fd
 8002050:	ff1f0efe 	.word	0xff1f0efe

08002054 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a64      	ldr	r2, [pc, #400]	@ (80021fc <HAL_ADC_Start_DMA+0x1a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Start_DMA+0x24>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a63      	ldr	r2, [pc, #396]	@ (8002200 <HAL_ADC_Start_DMA+0x1ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d106      	bne.n	8002086 <HAL_ADC_Start_DMA+0x32>
 8002078:	4b60      	ldr	r3, [pc, #384]	@ (80021fc <HAL_ADC_Start_DMA+0x1a8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80b3 	bne.w	80021ec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Start_DMA+0x40>
 8002090:	2302      	movs	r3, #2
 8002092:	e0ae      	b.n	80021f2 <HAL_ADC_Start_DMA+0x19e>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f9c1 	bl	8002424 <ADC_Enable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 809a 	bne.w	80021e2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002200 <HAL_ADC_Start_DMA+0x1ac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_Start_DMA+0x84>
 80020cc:	4b4b      	ldr	r3, [pc, #300]	@ (80021fc <HAL_ADC_Start_DMA+0x1a8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d115      	bne.n	8002104 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d026      	beq.n	8002140 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002102:	e01d      	b.n	8002140 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <HAL_ADC_Start_DMA+0x1a8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_ADC_Start_DMA+0xd0>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a38      	ldr	r2, [pc, #224]	@ (8002200 <HAL_ADC_Start_DMA+0x1ac>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10d      	bne.n	8002140 <HAL_ADC_Start_DMA+0xec>
 8002124:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <HAL_ADC_Start_DMA+0x1a8>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002138:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	f023 0206 	bic.w	r2, r3, #6
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a25      	ldr	r2, [pc, #148]	@ (8002204 <HAL_ADC_Start_DMA+0x1b0>)
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a24      	ldr	r2, [pc, #144]	@ (8002208 <HAL_ADC_Start_DMA+0x1b4>)
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a23      	ldr	r2, [pc, #140]	@ (800220c <HAL_ADC_Start_DMA+0x1b8>)
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0202 	mvn.w	r2, #2
 8002188:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002198:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a18      	ldr	r0, [r3, #32]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	334c      	adds	r3, #76	@ 0x4c
 80021a4:	4619      	mov	r1, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f000 fba5 	bl	80028f8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021b8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021bc:	d108      	bne.n	80021d0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021cc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021ce:	e00f      	b.n	80021f0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021de:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021e0:	e006      	b.n	80021f0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80021ea:	e001      	b.n	80021f0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012400 	.word	0x40012400
 8002200:	40012800 	.word	0x40012800
 8002204:	0800255b 	.word	0x0800255b
 8002208:	080025d7 	.word	0x080025d7
 800220c:	080025f3 	.word	0x080025f3

08002210 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x20>
 8002250:	2302      	movs	r3, #2
 8002252:	e0dc      	b.n	800240e <HAL_ADC_ConfigChannel+0x1da>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d81c      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b05      	subs	r3, #5
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	@ 0x34
 800229c:	e03c      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d81c      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b23      	subs	r3, #35	@ 0x23
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4019      	ands	r1, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b23      	subs	r3, #35	@ 0x23
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022de:	e01b      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	@ 0x41
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b41      	subs	r3, #65	@ 0x41
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d91c      	bls.n	800235a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	2207      	movs	r2, #7
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	4019      	ands	r1, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6898      	ldr	r0, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	3b1e      	subs	r3, #30
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	e019      	b.n	800238e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6919      	ldr	r1, [r3, #16]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d003      	beq.n	800239e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800239a:	2b11      	cmp	r3, #17
 800239c:	d132      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_ADC_ConfigChannel+0x1e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d126      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d11a      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_ADC_ConfigChannel+0x1e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <HAL_ADC_ConfigChannel+0x1ec>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1b2>
 80023f2:	e007      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012400 	.word	0x40012400
 800241c:	2000000c 	.word	0x2000000c
 8002420:	431bde83 	.word	0x431bde83

08002424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d040      	beq.n	80024c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <ADC_Enable+0xac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <ADC_Enable+0xb0>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002460:	e002      	b.n	8002468 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246e:	f7ff fceb 	bl	8001e48 <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002474:	e01f      	b.n	80024b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002476:	f7ff fce7 	bl	8001e48 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d918      	bls.n	80024b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d011      	beq.n	80024b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e007      	b.n	80024c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d1d8      	bne.n	8002476 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000000c 	.word	0x2000000c
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12e      	bne.n	8002550 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002502:	f7ff fca1 	bl	8001e48 <HAL_GetTick>
 8002506:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002508:	e01b      	b.n	8002542 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800250a:	f7ff fc9d 	bl	8001e48 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d914      	bls.n	8002542 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10d      	bne.n	8002542 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d0dc      	beq.n	800250a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d127      	bne.n	80025c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800258a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800258e:	d115      	bne.n	80025bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7fe fea3 	bl	8001308 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025c2:	e004      	b.n	80025ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff fe13 	bl	8002210 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff fe02 	bl	8002222 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	@ (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4906      	ldr	r1, [pc, #24]	@ (80026c0 <__NVIC_EnableIRQ+0x34>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	@ (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	@ (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f7ff ff90 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff2d 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e8:	f7ff ff42 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff90 	bl	8002718 <NVIC_EncodePriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff5f 	bl	80026c4 <__NVIC_SetPriority>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff35 	bl	800268c <__NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffa2 	bl	800277c <SysTick_Config>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e043      	b.n	80028e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_DMA_Init+0xa8>)
 8002862:	4413      	add	r3, r2
 8002864:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <HAL_DMA_Init+0xac>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	009a      	lsls	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1f      	ldr	r2, [pc, #124]	@ (80028f4 <HAL_DMA_Init+0xb0>)
 8002876:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800288e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002892:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	bffdfff8 	.word	0xbffdfff8
 80028f0:	cccccccd 	.word	0xcccccccd
 80028f4:	40020000 	.word	0x40020000

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_DMA_Start_IT+0x20>
 8002914:	2302      	movs	r3, #2
 8002916:	e04b      	b.n	80029b0 <HAL_DMA_Start_IT+0xb8>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d13a      	bne.n	80029a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9eb 	bl	8002d2c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 020e 	orr.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e00f      	b.n	8002990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 020a 	orr.w	r2, r2, #10
 800298e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e005      	b.n	80029ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2204      	movs	r2, #4
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e020      	b.n	8002a24 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 020e 	bic.w	r2, r2, #14
 80029f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e051      	b.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <HAL_DMA_Abort_IT+0xd4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d029      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0xa2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a21      	ldr	r2, [pc, #132]	@ (8002b08 <HAL_DMA_Abort_IT+0xd8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_Abort_IT+0x9e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_DMA_Abort_IT+0xdc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01a      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x98>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <HAL_DMA_Abort_IT+0xe0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x92>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_DMA_Abort_IT+0xe4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00a      	beq.n	8002abc <HAL_DMA_Abort_IT+0x8c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <HAL_DMA_Abort_IT+0xe8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <HAL_DMA_Abort_IT+0x86>
 8002ab0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ab4:	e00e      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aba:	e00b      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ac0:	e008      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	e005      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002acc:	e002      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	e000      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_DMA_Abort_IT+0xec>)
 8002ad6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
    } 
  }
  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020008 	.word	0x40020008
 8002b08:	4002001c 	.word	0x4002001c
 8002b0c:	40020030 	.word	0x40020030
 8002b10:	40020044 	.word	0x40020044
 8002b14:	40020058 	.word	0x40020058
 8002b18:	4002006c 	.word	0x4002006c
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04f      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xc8>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d04a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a66      	ldr	r2, [pc, #408]	@ (8002d10 <HAL_DMA_IRQHandler+0x1f0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d029      	beq.n	8002bce <HAL_DMA_IRQHandler+0xae>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_DMA_IRQHandler+0x1f4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <HAL_DMA_IRQHandler+0xaa>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a63      	ldr	r2, [pc, #396]	@ (8002d18 <HAL_DMA_IRQHandler+0x1f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xa4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a62      	ldr	r2, [pc, #392]	@ (8002d1c <HAL_DMA_IRQHandler+0x1fc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d012      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x9e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a60      	ldr	r2, [pc, #384]	@ (8002d20 <HAL_DMA_IRQHandler+0x200>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x98>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_DMA_IRQHandler+0x204>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <HAL_DMA_IRQHandler+0x92>
 8002bac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bb0:	e00e      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bb6:	e00b      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bbc:	e008      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bc2:	e005      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bc8:	e002      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	e000      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xb0>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	4a55      	ldr	r2, [pc, #340]	@ (8002d28 <HAL_DMA_IRQHandler+0x208>)
 8002bd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8094 	beq.w	8002d06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002be6:	e08e      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2202      	movs	r2, #2
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d056      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x186>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d051      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 020a 	bic.w	r2, r2, #10
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a38      	ldr	r2, [pc, #224]	@ (8002d10 <HAL_DMA_IRQHandler+0x1f0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d029      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x166>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a37      	ldr	r2, [pc, #220]	@ (8002d14 <HAL_DMA_IRQHandler+0x1f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x162>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a35      	ldr	r2, [pc, #212]	@ (8002d18 <HAL_DMA_IRQHandler+0x1f8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x15c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a34      	ldr	r2, [pc, #208]	@ (8002d1c <HAL_DMA_IRQHandler+0x1fc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x156>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a32      	ldr	r2, [pc, #200]	@ (8002d20 <HAL_DMA_IRQHandler+0x200>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00a      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x150>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	@ (8002d24 <HAL_DMA_IRQHandler+0x204>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x14a>
 8002c64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c68:	e00e      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6e:	e00b      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c74:	e008      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c7a:	e005      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c80:	e002      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c82:	2320      	movs	r3, #32
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_IRQHandler+0x168>
 8002c86:	2302      	movs	r3, #2
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <HAL_DMA_IRQHandler+0x208>)
 8002c8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d034      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ca4:	e02f      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2208      	movs	r2, #8
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x1e8>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 020e 	bic.w	r2, r2, #14
 8002cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
    }
  }
  return;
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
}
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40020008 	.word	0x40020008
 8002d14:	4002001c 	.word	0x4002001c
 8002d18:	40020030 	.word	0x40020030
 8002d1c:	40020044 	.word	0x40020044
 8002d20:	40020058 	.word	0x40020058
 8002d24:	4002006c 	.word	0x4002006c
 8002d28:	40020000 	.word	0x40020000

08002d2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d108      	bne.n	8002d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d6a:	e007      	b.n	8002d7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b08b      	sub	sp, #44	@ 0x2c
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e169      	b.n	8003070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f040 8158 	bne.w	800306a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a9a      	ldr	r2, [pc, #616]	@ (8003028 <HAL_GPIO_Init+0x2a0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a98      	ldr	r2, [pc, #608]	@ (8003028 <HAL_GPIO_Init+0x2a0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d875      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dca:	4a98      	ldr	r2, [pc, #608]	@ (800302c <HAL_GPIO_Init+0x2a4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d058      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002dd0:	4a96      	ldr	r2, [pc, #600]	@ (800302c <HAL_GPIO_Init+0x2a4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d86f      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a96      	ldr	r2, [pc, #600]	@ (8003030 <HAL_GPIO_Init+0x2a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d052      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002ddc:	4a94      	ldr	r2, [pc, #592]	@ (8003030 <HAL_GPIO_Init+0x2a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d869      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002de2:	4a94      	ldr	r2, [pc, #592]	@ (8003034 <HAL_GPIO_Init+0x2ac>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04c      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002de8:	4a92      	ldr	r2, [pc, #584]	@ (8003034 <HAL_GPIO_Init+0x2ac>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d863      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dee:	4a92      	ldr	r2, [pc, #584]	@ (8003038 <HAL_GPIO_Init+0x2b0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d046      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002df4:	4a90      	ldr	r2, [pc, #576]	@ (8003038 <HAL_GPIO_Init+0x2b0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d85d      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d82a      	bhi.n	8002e54 <HAL_GPIO_Init+0xcc>
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d859      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002e02:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <HAL_GPIO_Init+0x80>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e83 	.word	0x08002e83
 8002e0c:	08002e5d 	.word	0x08002e5d
 8002e10:	08002e6f 	.word	0x08002e6f
 8002e14:	08002eb1 	.word	0x08002eb1
 8002e18:	08002eb7 	.word	0x08002eb7
 8002e1c:	08002eb7 	.word	0x08002eb7
 8002e20:	08002eb7 	.word	0x08002eb7
 8002e24:	08002eb7 	.word	0x08002eb7
 8002e28:	08002eb7 	.word	0x08002eb7
 8002e2c:	08002eb7 	.word	0x08002eb7
 8002e30:	08002eb7 	.word	0x08002eb7
 8002e34:	08002eb7 	.word	0x08002eb7
 8002e38:	08002eb7 	.word	0x08002eb7
 8002e3c:	08002eb7 	.word	0x08002eb7
 8002e40:	08002eb7 	.word	0x08002eb7
 8002e44:	08002eb7 	.word	0x08002eb7
 8002e48:	08002eb7 	.word	0x08002eb7
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	4a79      	ldr	r2, [pc, #484]	@ (800303c <HAL_GPIO_Init+0x2b4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e5a:	e02c      	b.n	8002eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	623b      	str	r3, [r7, #32]
          break;
 8002e62:	e029      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	e024      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	3308      	adds	r3, #8
 8002e74:	623b      	str	r3, [r7, #32]
          break;
 8002e76:	e01f      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	623b      	str	r3, [r7, #32]
          break;
 8002e80:	e01a      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e013      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	611a      	str	r2, [r3, #16]
          break;
 8002ea2:	e009      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	615a      	str	r2, [r3, #20]
          break;
 8002eae:	e003      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
          break;
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          break;
 8002eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
 8002ebc:	d801      	bhi.n	8002ec2 <HAL_GPIO_Init+0x13a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	e001      	b.n	8002ec6 <HAL_GPIO_Init+0x13e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2bff      	cmp	r3, #255	@ 0xff
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_GPIO_Init+0x14c>
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_Init+0x152>
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	3b08      	subs	r3, #8
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	210f      	movs	r1, #15
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80b1 	beq.w	800306a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f08:	4b4d      	ldr	r3, [pc, #308]	@ (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b4a      	ldr	r3, [pc, #296]	@ (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f20:	4a48      	ldr	r2, [pc, #288]	@ (8003044 <HAL_GPIO_Init+0x2bc>)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a40      	ldr	r2, [pc, #256]	@ (8003048 <HAL_GPIO_Init+0x2c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_GPIO_Init+0x1ec>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800304c <HAL_GPIO_Init+0x2c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00d      	beq.n	8002f70 <HAL_GPIO_Init+0x1e8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3e      	ldr	r2, [pc, #248]	@ (8003050 <HAL_GPIO_Init+0x2c8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <HAL_GPIO_Init+0x1e4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003054 <HAL_GPIO_Init+0x2cc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_Init+0x1e0>
 8002f64:	2303      	movs	r3, #3
 8002f66:	e006      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e004      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f74:	2300      	movs	r3, #0
 8002f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f78:	f002 0203 	and.w	r2, r2, #3
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	4093      	lsls	r3, r2
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f86:	492f      	ldr	r1, [pc, #188]	@ (8003044 <HAL_GPIO_Init+0x2bc>)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	492c      	ldr	r1, [pc, #176]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fae:	4b2a      	ldr	r3, [pc, #168]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	4928      	ldr	r1, [pc, #160]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4922      	ldr	r1, [pc, #136]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60cb      	str	r3, [r1, #12]
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	491e      	ldr	r1, [pc, #120]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4918      	ldr	r1, [pc, #96]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	43db      	mvns	r3, r3
 8003006:	4914      	ldr	r1, [pc, #80]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 8003008:	4013      	ands	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d021      	beq.n	800305c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	490e      	ldr	r1, [pc, #56]	@ (8003058 <HAL_GPIO_Init+0x2d0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e021      	b.n	800306a <HAL_GPIO_Init+0x2e2>
 8003026:	bf00      	nop
 8003028:	10320000 	.word	0x10320000
 800302c:	10310000 	.word	0x10310000
 8003030:	10220000 	.word	0x10220000
 8003034:	10210000 	.word	0x10210000
 8003038:	10120000 	.word	0x10120000
 800303c:	10110000 	.word	0x10110000
 8003040:	40021000 	.word	0x40021000
 8003044:	40010000 	.word	0x40010000
 8003048:	40010800 	.word	0x40010800
 800304c:	40010c00 	.word	0x40010c00
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_GPIO_Init+0x304>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	43db      	mvns	r3, r3
 8003064:	4909      	ldr	r1, [pc, #36]	@ (800308c <HAL_GPIO_Init+0x304>)
 8003066:	4013      	ands	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	3301      	adds	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	f47f ae8e 	bne.w	8002d9c <HAL_GPIO_Init+0x14>
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	372c      	adds	r7, #44	@ 0x2c
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e272      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8087 	beq.w	80031be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b0:	4b92      	ldr	r3, [pc, #584]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d00c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030bc:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d112      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
 80030c8:	4b8c      	ldr	r3, [pc, #560]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d10b      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d06c      	beq.n	80031bc <HAL_RCC_OscConfig+0x12c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d168      	bne.n	80031bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e24c      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x76>
 80030f8:	4b80      	ldr	r3, [pc, #512]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7f      	ldr	r2, [pc, #508]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e02e      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b7b      	ldr	r3, [pc, #492]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7a      	ldr	r2, [pc, #488]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b78      	ldr	r3, [pc, #480]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a77      	ldr	r2, [pc, #476]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0xbc>
 8003132:	4b72      	ldr	r3, [pc, #456]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a71      	ldr	r2, [pc, #452]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6f      	ldr	r3, [pc, #444]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 800314c:	4b6b      	ldr	r3, [pc, #428]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6a      	ldr	r2, [pc, #424]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b68      	ldr	r3, [pc, #416]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a67      	ldr	r2, [pc, #412]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fe6c 	bl	8001e48 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fe68 	bl	8001e48 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e200      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5d      	ldr	r3, [pc, #372]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xe4>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fe58 	bl	8001e48 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fe54 	bl	8001e48 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1ec      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b53      	ldr	r3, [pc, #332]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x10c>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ca:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031d6:	4b49      	ldr	r3, [pc, #292]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
 80031e2:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c0      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4939      	ldr	r1, [pc, #228]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fe0d 	bl	8001e48 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fe09 	bl	8001e48 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4927      	ldr	r1, [pc, #156]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <HAL_RCC_OscConfig+0x270>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fdec 	bl	8001e48 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fde8 	bl	8001e48 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e180      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03a      	beq.n	8003314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fdcc 	bl	8001e48 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fdc8 	bl	8001e48 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e160      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCC_OscConfig+0x26c>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f000 face 	bl	8003874 <RCC_Delay>
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_RCC_OscConfig+0x274>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fdb2 	bl	8001e48 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fdae 	bl	8001e48 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d908      	bls.n	8003308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e146      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	42420000 	.word	0x42420000
 8003304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e9      	bne.n	80032e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a6 	beq.w	800346e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b8b      	ldr	r3, [pc, #556]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a87      	ldr	r2, [pc, #540]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b85      	ldr	r3, [pc, #532]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b82      	ldr	r3, [pc, #520]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe fd6f 	bl	8001e48 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe fd6b 	bl	8001e48 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	@ 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e103      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b75      	ldr	r3, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x312>
 8003394:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e02d      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a69      	ldr	r2, [pc, #420]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b67      	ldr	r3, [pc, #412]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a66      	ldr	r2, [pc, #408]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x356>
 80033cc:	4b61      	ldr	r3, [pc, #388]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a60      	ldr	r2, [pc, #384]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b58      	ldr	r3, [pc, #352]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fd1f 	bl	8001e48 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fd1b 	bl	8001e48 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0b1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x37e>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fd09 	bl	8001e48 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fd05 	bl	8001e48 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e09b      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a3b      	ldr	r2, [pc, #236]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d061      	beq.n	8003548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d146      	bne.n	800351a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b33      	ldr	r3, [pc, #204]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fcd9 	bl	8001e48 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fcd5 	bl	8001e48 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e06d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ac:	4b29      	ldr	r3, [pc, #164]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c2:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4921      	ldr	r1, [pc, #132]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a19      	ldr	r1, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	430b      	orrs	r3, r1
 80034e6:	491b      	ldr	r1, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fca9 	bl	8001e48 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fca5 	bl	8001e48 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e03d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x46a>
 8003518:	e035      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fc92 	bl	8001e48 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fc8e 	bl	8001e48 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e026      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x498>
 8003546:	e01e      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e019      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_OscConfig+0x500>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4965      	ldr	r1, [pc, #404]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe fbe0 	bl	8001e48 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe fbdc 	bl	8001e48 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4922      	ldr	r1, [pc, #136]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	@ (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	@ (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fb3e 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	08005738 	.word	0x08005738
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000010 	.word	0x20000010

08003768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d002      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x30>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x36>
 8003796:	e027      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	e027      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0c9b      	lsrs	r3, r3, #18
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0c5b      	lsrs	r3, r3, #17
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	4a11      	ldr	r2, [pc, #68]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <HAL_RCC_GetSysClockFreq+0xa4>)
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ea:	613b      	str	r3, [r7, #16]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	693b      	ldr	r3, [r7, #16]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	08005750 	.word	0x08005750
 8003808:	08005760 	.word	0x08005760
 800380c:	003d0900 	.word	0x003d0900

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	2000000c 	.word	0x2000000c

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08005748 	.word	0x08005748

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffde 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0adb      	lsrs	r3, r3, #11
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	08005748 	.word	0x08005748

08003874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800387c:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <RCC_Delay+0x34>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <RCC_Delay+0x38>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0a5b      	lsrs	r3, r3, #9
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003890:	bf00      	nop
  }
  while (Delay --);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <RCC_Delay+0x1c>
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	2000000c 	.word	0x2000000c
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07d      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	61d3      	str	r3, [r2, #28]
 80038e8:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003904:	4b43      	ldr	r3, [pc, #268]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a42      	ldr	r2, [pc, #264]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003910:	f7fe fa9a 	bl	8001e48 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	e008      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fe fa96 	bl	8001e48 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e06d      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003936:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	429a      	cmp	r2, r3
 8003952:	d027      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003954:	4b2e      	ldr	r3, [pc, #184]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	4b2c      	ldr	r3, [pc, #176]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800396a:	4a29      	ldr	r2, [pc, #164]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fe fa65 	bl	8001e48 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fe fa61 	bl	8001e48 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e036      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4917      	ldr	r1, [pc, #92]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a13      	ldr	r2, [pc, #76]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	490b      	ldr	r1, [pc, #44]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420440 	.word	0x42420440

08003a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fe9c 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 f940 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <HAL_TIM_Base_Start+0x88>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_TIM_Base_Start+0x48>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aee:	d009      	beq.n	8003b04 <HAL_TIM_Base_Start+0x48>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <HAL_TIM_Base_Start+0x8c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIM_Base_Start+0x48>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <HAL_TIM_Base_Start+0x90>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d111      	bne.n	8003b28 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d010      	beq.n	8003b38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b26:	e007      	b.n	8003b38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800

08003b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIM_ConfigClockSource+0x1c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e0b4      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x186>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba4:	d03e      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xd4>
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003baa:	f200 8087 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	f000 8086 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x172>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	d87f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b70      	cmp	r3, #112	@ 0x70
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8003bc0:	2b70      	cmp	r3, #112	@ 0x70
 8003bc2:	d87b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b60      	cmp	r3, #96	@ 0x60
 8003bc6:	d050      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x11a>
 8003bc8:	2b60      	cmp	r3, #96	@ 0x60
 8003bca:	d877      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b50      	cmp	r3, #80	@ 0x50
 8003bce:	d03c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xfa>
 8003bd0:	2b50      	cmp	r3, #80	@ 0x50
 8003bd2:	d873      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d058      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x13a>
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d86f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b30      	cmp	r3, #48	@ 0x30
 8003bde:	d064      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b30      	cmp	r3, #48	@ 0x30
 8003be2:	d86b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d060      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d867      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d05a      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	e062      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	f000 f944 	bl	8003e92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	609a      	str	r2, [r3, #8]
      break;
 8003c22:	e04f      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	f000 f92d 	bl	8003e92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e03c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 f8a4 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2150      	movs	r1, #80	@ 0x50
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f8fb 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c68:	e02c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 f8c2 	bl	8003e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2160      	movs	r1, #96	@ 0x60
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f8eb 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c88:	e01c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 f884 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2140      	movs	r1, #64	@ 0x40
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f8db 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 f8d2 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a26      	ldr	r2, [pc, #152]	@ (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	@ (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	@ (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0210 	bic.w	r2, r3, #16
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e046      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f34:	d009      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800

08003f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e042      	b.n	8004024 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fc02 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fdc5 	bl	8004b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b20      	cmp	r3, #32
 800404a:	d16d      	bne.n	8004128 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_UART_Transmit+0x2c>
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e066      	b.n	800412a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2221      	movs	r2, #33	@ 0x21
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800406a:	f7fd feed 	bl	8001e48 <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004084:	d108      	bne.n	8004098 <HAL_UART_Transmit+0x6c>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e003      	b.n	80040a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040a0:	e02a      	b.n	80040f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	@ 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fb14 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e036      	b.n	800412a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e007      	b.n	80040ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1cf      	bne.n	80040a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2140      	movs	r1, #64	@ 0x40
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fae4 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b20      	cmp	r3, #32
 800414a:	d112      	bne.n	8004172 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Receive_IT+0x26>
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e00b      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fb24 	bl	80047b6 <UART_Start_Receive_IT>
 800416e:	4603      	mov	r3, r0
 8004170:	e000      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0ba      	sub	sp, #232	@ 0xe8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fc01 	bl	80049e2 <UART_Receive_IT>
      return;
 80041e0:	e25b      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80de 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80d1 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
 8004212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0201 	orr.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f043 0204 	orr.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 81f2 	beq.w	8004690 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb8c 	bl	80049e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_UART_IRQHandler+0x17a>
 80042ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04f      	beq.n	8004396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa96 	bl	8004828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d041      	beq.n	800438e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800434e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d013      	beq.n	8004386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	4a7e      	ldr	r2, [pc, #504]	@ (800455c <HAL_UART_IRQHandler+0x3e0>)
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fb60 	bl	8002a30 <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00e      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f993 	bl	80046b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e00a      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f98f 	bl	80046b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e006      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f98b 	bl	80046b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043a2:	e175      	b.n	8004690 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	bf00      	nop
    return;
 80043a6:	e173      	b.n	8004690 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 814f 	bne.w	8004650 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8148 	beq.w	8004650 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8141 	beq.w	8004650 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80b6 	beq.w	8004560 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8145 	beq.w	8004694 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004412:	429a      	cmp	r2, r3
 8004414:	f080 813e 	bcs.w	8004694 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b20      	cmp	r3, #32
 8004428:	f000 8088 	beq.w	800453c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004458:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800445c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004464:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1d9      	bne.n	800442c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e1      	bne.n	8004478 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e3      	bne.n	80044b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800450a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450c:	f023 0310 	bic.w	r3, r3, #16
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800451e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004520:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800452c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e3      	bne.n	80044fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fa3e 	bl	80029b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800454a:	b29b      	uxth	r3, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8b6 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004558:	e09c      	b.n	8004694 <HAL_UART_IRQHandler+0x518>
 800455a:	bf00      	nop
 800455c:	080048ed 	.word	0x080048ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 808e 	beq.w	8004698 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800457c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8089 	beq.w	8004698 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800459c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80045ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e3      	bne.n	8004586 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	623b      	str	r3, [r7, #32]
   return(result);
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e3      	bne.n	80045be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004628:	61fa      	str	r2, [r7, #28]
 800462a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	617b      	str	r3, [r7, #20]
   return(result);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e3      	bne.n	8004604 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f83b 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800464e:	e023      	b.n	8004698 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_UART_IRQHandler+0x4f4>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f953 	bl	8004914 <UART_Transmit_IT>
    return;
 800466e:	e014      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <HAL_UART_IRQHandler+0x51e>
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f992 	bl	80049b2 <UART_EndTransmit_IT>
    return;
 800468e:	e004      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
    return;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
      return;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
      return;
 8004698:	bf00      	nop
  }
}
 800469a:	37e8      	adds	r7, #232	@ 0xe8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b090      	sub	sp, #64	@ 0x40
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	e050      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d04c      	beq.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0x30>
 80046fa:	f7fd fba5 	bl	8001e48 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004706:	429a      	cmp	r2, r3
 8004708:	d241      	bcs.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800472a:	637a      	str	r2, [r7, #52]	@ 0x34
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	613b      	str	r3, [r7, #16]
   return(result);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800475e:	623a      	str	r2, [r7, #32]
 8004760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	69f9      	ldr	r1, [r7, #28]
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	61bb      	str	r3, [r7, #24]
   return(result);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e00f      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d09f      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3740      	adds	r7, #64	@ 0x40
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2222      	movs	r2, #34	@ 0x22
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0220 	orr.w	r2, r2, #32
 800481a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b095      	sub	sp, #84	@ 0x54
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004850:	643a      	str	r2, [r7, #64]	@ 0x40
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e5      	bne.n	8004830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	61fb      	str	r3, [r7, #28]
   return(result);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800488a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	2b01      	cmp	r3, #1
 800489e:	d119      	bne.n	80048d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c0:	61ba      	str	r2, [r7, #24]
 80048c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048e2:	bf00      	nop
 80048e4:	3754      	adds	r7, #84	@ 0x54
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff fed3 	bl	80046b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b21      	cmp	r3, #33	@ 0x21
 8004926:	d13e      	bne.n	80049a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004930:	d114      	bne.n	800495c <UART_Transmit_IT+0x48>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d110      	bne.n	800495c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]
 800495a:	e008      	b.n	800496e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	1c59      	adds	r1, r3, #1
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6211      	str	r1, [r2, #32]
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4619      	mov	r1, r3
 800497c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004990:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fe64 	bl	80046a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b08c      	sub	sp, #48	@ 0x30
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b22      	cmp	r3, #34	@ 0x22
 80049f4:	f040 80ae 	bne.w	8004b54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a00:	d117      	bne.n	8004a32 <UART_Receive_IT+0x50>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d113      	bne.n	8004a32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a30:	e026      	b.n	8004a80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a44:	d007      	beq.n	8004a56 <UART_Receive_IT+0x74>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <UART_Receive_IT+0x82>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e008      	b.n	8004a76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d15d      	bne.n	8004b50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0220 	bic.w	r2, r2, #32
 8004aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d135      	bne.n	8004b46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	613b      	str	r3, [r7, #16]
   return(result);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	623a      	str	r2, [r7, #32]
 8004b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	69f9      	ldr	r1, [r7, #28]
 8004b06:	6a3a      	ldr	r2, [r7, #32]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d10a      	bne.n	8004b38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fdc0 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
 8004b44:	e002      	b.n	8004b4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fbec 	bl	8001324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e002      	b.n	8004b56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3730      	adds	r7, #48	@ 0x30
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b9a:	f023 030c 	bic.w	r3, r3, #12
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <UART_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7fe fe40 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	e002      	b.n	8004bd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fe fe28 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009a      	lsls	r2, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	4a22      	ldr	r2, [pc, #136]	@ (8004c78 <UART_SetConfig+0x118>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	0119      	lsls	r1, r3, #4
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <UART_SetConfig+0x118>)
 8004c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2064      	movs	r0, #100	@ 0x64
 8004c16:	fb00 f303 	mul.w	r3, r0, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	3332      	adds	r3, #50	@ 0x32
 8004c20:	4a15      	ldr	r2, [pc, #84]	@ (8004c78 <UART_SetConfig+0x118>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c2c:	4419      	add	r1, r3
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <UART_SetConfig+0x118>)
 8004c46:	fba3 0302 	umull	r0, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2064      	movs	r0, #100	@ 0x64
 8004c4e:	fb00 f303 	mul.w	r3, r0, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	@ 0x32
 8004c58:	4a07      	ldr	r2, [pc, #28]	@ (8004c78 <UART_SetConfig+0x118>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 020f 	and.w	r2, r3, #15
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	440a      	add	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40013800 	.word	0x40013800
 8004c78:	51eb851f 	.word	0x51eb851f

08004c7c <siprintf>:
 8004c7c:	b40e      	push	{r1, r2, r3}
 8004c7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c82:	b500      	push	{lr}
 8004c84:	b09c      	sub	sp, #112	@ 0x70
 8004c86:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c88:	9002      	str	r0, [sp, #8]
 8004c8a:	9006      	str	r0, [sp, #24]
 8004c8c:	9107      	str	r1, [sp, #28]
 8004c8e:	9104      	str	r1, [sp, #16]
 8004c90:	4808      	ldr	r0, [pc, #32]	@ (8004cb4 <siprintf+0x38>)
 8004c92:	4909      	ldr	r1, [pc, #36]	@ (8004cb8 <siprintf+0x3c>)
 8004c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c98:	9105      	str	r1, [sp, #20]
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	a902      	add	r1, sp, #8
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	f000 f992 	bl	8004fc8 <_svfiprintf_r>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	b01c      	add	sp, #112	@ 0x70
 8004cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb0:	b003      	add	sp, #12
 8004cb2:	4770      	bx	lr
 8004cb4:	20000018 	.word	0x20000018
 8004cb8:	ffff0208 	.word	0xffff0208

08004cbc <memset>:
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	@ (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000018 	.word	0x20000018

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	2600      	movs	r6, #0
 8004cdc:	4d0c      	ldr	r5, [pc, #48]	@ (8004d10 <__libc_init_array+0x38>)
 8004cde:	4c0d      	ldr	r4, [pc, #52]	@ (8004d14 <__libc_init_array+0x3c>)
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	f000 fc78 	bl	80055dc <_init>
 8004cec:	2600      	movs	r6, #0
 8004cee:	4d0a      	ldr	r5, [pc, #40]	@ (8004d18 <__libc_init_array+0x40>)
 8004cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8004d1c <__libc_init_array+0x44>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	080057a0 	.word	0x080057a0
 8004d14:	080057a0 	.word	0x080057a0
 8004d18:	080057a0 	.word	0x080057a0
 8004d1c:	080057a4 	.word	0x080057a4

08004d20 <__retarget_lock_acquire_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__retarget_lock_release_recursive>:
 8004d22:	4770      	bx	lr

08004d24 <_free_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d040      	beq.n	8004dae <_free_r+0x8a>
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f0c      	subs	r4, r1, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfb8      	it	lt
 8004d36:	18e4      	addlt	r4, r4, r3
 8004d38:	f000 f8de 	bl	8004ef8 <__malloc_lock>
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <_free_r+0x8c>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	b933      	cbnz	r3, 8004d50 <_free_r+0x2c>
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6014      	str	r4, [r2, #0]
 8004d46:	4628      	mov	r0, r5
 8004d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d4c:	f000 b8da 	b.w	8004f04 <__malloc_unlock>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x42>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1809      	addeq	r1, r1, r0
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	e7ed      	b.n	8004d42 <_free_r+0x1e>
 8004d66:	461a      	mov	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b10b      	cbz	r3, 8004d70 <_free_r+0x4c>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x42>
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	1850      	adds	r0, r2, r1
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x6c>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	1850      	adds	r0, r2, r1
 8004d7e:	4283      	cmp	r3, r0
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	d1e0      	bne.n	8004d46 <_free_r+0x22>
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4408      	add	r0, r1
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	6053      	str	r3, [r2, #4]
 8004d8e:	e7da      	b.n	8004d46 <_free_r+0x22>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x74>
 8004d92:	230c      	movs	r3, #12
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	e7d6      	b.n	8004d46 <_free_r+0x22>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf01      	itttt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	1809      	addeq	r1, r1, r0
 8004da6:	6021      	streq	r1, [r4, #0]
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	6054      	str	r4, [r2, #4]
 8004dac:	e7cb      	b.n	8004d46 <_free_r+0x22>
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	200004d8 	.word	0x200004d8

08004db4 <sbrk_aligned>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4e0f      	ldr	r6, [pc, #60]	@ (8004df4 <sbrk_aligned+0x40>)
 8004db8:	460c      	mov	r4, r1
 8004dba:	6831      	ldr	r1, [r6, #0]
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	b911      	cbnz	r1, 8004dc6 <sbrk_aligned+0x12>
 8004dc0:	f000 fbaa 	bl	8005518 <_sbrk_r>
 8004dc4:	6030      	str	r0, [r6, #0]
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 fba5 	bl	8005518 <_sbrk_r>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d103      	bne.n	8004dda <sbrk_aligned+0x26>
 8004dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	1cc4      	adds	r4, r0, #3
 8004ddc:	f024 0403 	bic.w	r4, r4, #3
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d0f8      	beq.n	8004dd6 <sbrk_aligned+0x22>
 8004de4:	1a21      	subs	r1, r4, r0
 8004de6:	4628      	mov	r0, r5
 8004de8:	f000 fb96 	bl	8005518 <_sbrk_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d1f2      	bne.n	8004dd6 <sbrk_aligned+0x22>
 8004df0:	e7ef      	b.n	8004dd2 <sbrk_aligned+0x1e>
 8004df2:	bf00      	nop
 8004df4:	200004d4 	.word	0x200004d4

08004df8 <_malloc_r>:
 8004df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dfc:	1ccd      	adds	r5, r1, #3
 8004dfe:	f025 0503 	bic.w	r5, r5, #3
 8004e02:	3508      	adds	r5, #8
 8004e04:	2d0c      	cmp	r5, #12
 8004e06:	bf38      	it	cc
 8004e08:	250c      	movcc	r5, #12
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	db01      	blt.n	8004e14 <_malloc_r+0x1c>
 8004e10:	42a9      	cmp	r1, r5
 8004e12:	d904      	bls.n	8004e1e <_malloc_r+0x26>
 8004e14:	230c      	movs	r3, #12
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ef4 <_malloc_r+0xfc>
 8004e22:	f000 f869 	bl	8004ef8 <__malloc_lock>
 8004e26:	f8d8 3000 	ldr.w	r3, [r8]
 8004e2a:	461c      	mov	r4, r3
 8004e2c:	bb44      	cbnz	r4, 8004e80 <_malloc_r+0x88>
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7ff ffbf 	bl	8004db4 <sbrk_aligned>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	4604      	mov	r4, r0
 8004e3a:	d158      	bne.n	8004eee <_malloc_r+0xf6>
 8004e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e40:	4627      	mov	r7, r4
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d143      	bne.n	8004ece <_malloc_r+0xd6>
 8004e46:	2c00      	cmp	r4, #0
 8004e48:	d04b      	beq.n	8004ee2 <_malloc_r+0xea>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	4630      	mov	r0, r6
 8004e50:	eb04 0903 	add.w	r9, r4, r3
 8004e54:	f000 fb60 	bl	8005518 <_sbrk_r>
 8004e58:	4581      	cmp	r9, r0
 8004e5a:	d142      	bne.n	8004ee2 <_malloc_r+0xea>
 8004e5c:	6821      	ldr	r1, [r4, #0]
 8004e5e:	4630      	mov	r0, r6
 8004e60:	1a6d      	subs	r5, r5, r1
 8004e62:	4629      	mov	r1, r5
 8004e64:	f7ff ffa6 	bl	8004db4 <sbrk_aligned>
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d03a      	beq.n	8004ee2 <_malloc_r+0xea>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	442b      	add	r3, r5
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	f8d8 3000 	ldr.w	r3, [r8]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	bb62      	cbnz	r2, 8004ed4 <_malloc_r+0xdc>
 8004e7a:	f8c8 7000 	str.w	r7, [r8]
 8004e7e:	e00f      	b.n	8004ea0 <_malloc_r+0xa8>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	1b52      	subs	r2, r2, r5
 8004e84:	d420      	bmi.n	8004ec8 <_malloc_r+0xd0>
 8004e86:	2a0b      	cmp	r2, #11
 8004e88:	d917      	bls.n	8004eba <_malloc_r+0xc2>
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	6025      	str	r5, [r4, #0]
 8004e90:	bf18      	it	ne
 8004e92:	6059      	strne	r1, [r3, #4]
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	bf08      	it	eq
 8004e98:	f8c8 1000 	streq.w	r1, [r8]
 8004e9c:	5162      	str	r2, [r4, r5]
 8004e9e:	604b      	str	r3, [r1, #4]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f82f 	bl	8004f04 <__malloc_unlock>
 8004ea6:	f104 000b 	add.w	r0, r4, #11
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	f020 0007 	bic.w	r0, r0, #7
 8004eb0:	1ac2      	subs	r2, r0, r3
 8004eb2:	bf1c      	itt	ne
 8004eb4:	1a1b      	subne	r3, r3, r0
 8004eb6:	50a3      	strne	r3, [r4, r2]
 8004eb8:	e7af      	b.n	8004e1a <_malloc_r+0x22>
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	bf0c      	ite	eq
 8004ec0:	f8c8 2000 	streq.w	r2, [r8]
 8004ec4:	605a      	strne	r2, [r3, #4]
 8004ec6:	e7eb      	b.n	8004ea0 <_malloc_r+0xa8>
 8004ec8:	4623      	mov	r3, r4
 8004eca:	6864      	ldr	r4, [r4, #4]
 8004ecc:	e7ae      	b.n	8004e2c <_malloc_r+0x34>
 8004ece:	463c      	mov	r4, r7
 8004ed0:	687f      	ldr	r7, [r7, #4]
 8004ed2:	e7b6      	b.n	8004e42 <_malloc_r+0x4a>
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	d1fb      	bne.n	8004ed4 <_malloc_r+0xdc>
 8004edc:	2300      	movs	r3, #0
 8004ede:	6053      	str	r3, [r2, #4]
 8004ee0:	e7de      	b.n	8004ea0 <_malloc_r+0xa8>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	f000 f80c 	bl	8004f04 <__malloc_unlock>
 8004eec:	e794      	b.n	8004e18 <_malloc_r+0x20>
 8004eee:	6005      	str	r5, [r0, #0]
 8004ef0:	e7d6      	b.n	8004ea0 <_malloc_r+0xa8>
 8004ef2:	bf00      	nop
 8004ef4:	200004d8 	.word	0x200004d8

08004ef8 <__malloc_lock>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	@ (8004f00 <__malloc_lock+0x8>)
 8004efa:	f7ff bf11 	b.w	8004d20 <__retarget_lock_acquire_recursive>
 8004efe:	bf00      	nop
 8004f00:	200004d0 	.word	0x200004d0

08004f04 <__malloc_unlock>:
 8004f04:	4801      	ldr	r0, [pc, #4]	@ (8004f0c <__malloc_unlock+0x8>)
 8004f06:	f7ff bf0c 	b.w	8004d22 <__retarget_lock_release_recursive>
 8004f0a:	bf00      	nop
 8004f0c:	200004d0 	.word	0x200004d0

08004f10 <__ssputs_r>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	461f      	mov	r7, r3
 8004f16:	688e      	ldr	r6, [r1, #8]
 8004f18:	4682      	mov	sl, r0
 8004f1a:	42be      	cmp	r6, r7
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	4690      	mov	r8, r2
 8004f20:	680b      	ldr	r3, [r1, #0]
 8004f22:	d82d      	bhi.n	8004f80 <__ssputs_r+0x70>
 8004f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f2c:	d026      	beq.n	8004f7c <__ssputs_r+0x6c>
 8004f2e:	6965      	ldr	r5, [r4, #20]
 8004f30:	6909      	ldr	r1, [r1, #16]
 8004f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f36:	eba3 0901 	sub.w	r9, r3, r1
 8004f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f3e:	1c7b      	adds	r3, r7, #1
 8004f40:	444b      	add	r3, r9
 8004f42:	106d      	asrs	r5, r5, #1
 8004f44:	429d      	cmp	r5, r3
 8004f46:	bf38      	it	cc
 8004f48:	461d      	movcc	r5, r3
 8004f4a:	0553      	lsls	r3, r2, #21
 8004f4c:	d527      	bpl.n	8004f9e <__ssputs_r+0x8e>
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7ff ff52 	bl	8004df8 <_malloc_r>
 8004f54:	4606      	mov	r6, r0
 8004f56:	b360      	cbz	r0, 8004fb2 <__ssputs_r+0xa2>
 8004f58:	464a      	mov	r2, r9
 8004f5a:	6921      	ldr	r1, [r4, #16]
 8004f5c:	f000 fafa 	bl	8005554 <memcpy>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	6126      	str	r6, [r4, #16]
 8004f6e:	444e      	add	r6, r9
 8004f70:	6026      	str	r6, [r4, #0]
 8004f72:	463e      	mov	r6, r7
 8004f74:	6165      	str	r5, [r4, #20]
 8004f76:	eba5 0509 	sub.w	r5, r5, r9
 8004f7a:	60a5      	str	r5, [r4, #8]
 8004f7c:	42be      	cmp	r6, r7
 8004f7e:	d900      	bls.n	8004f82 <__ssputs_r+0x72>
 8004f80:	463e      	mov	r6, r7
 8004f82:	4632      	mov	r2, r6
 8004f84:	4641      	mov	r1, r8
 8004f86:	6820      	ldr	r0, [r4, #0]
 8004f88:	f000 faac 	bl	80054e4 <memmove>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	1b9b      	subs	r3, r3, r6
 8004f92:	60a3      	str	r3, [r4, #8]
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	4433      	add	r3, r6
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	f000 fae6 	bl	8005570 <_realloc_r>
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d1e0      	bne.n	8004f6c <__ssputs_r+0x5c>
 8004faa:	4650      	mov	r0, sl
 8004fac:	6921      	ldr	r1, [r4, #16]
 8004fae:	f7ff feb9 	bl	8004d24 <_free_r>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	f8ca 3000 	str.w	r3, [sl]
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	e7e9      	b.n	8004f9a <__ssputs_r+0x8a>
	...

08004fc8 <_svfiprintf_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4698      	mov	r8, r3
 8004fce:	898b      	ldrh	r3, [r1, #12]
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	4614      	mov	r4, r2
 8004fd8:	b09d      	sub	sp, #116	@ 0x74
 8004fda:	d510      	bpl.n	8004ffe <_svfiprintf_r+0x36>
 8004fdc:	690b      	ldr	r3, [r1, #16]
 8004fde:	b973      	cbnz	r3, 8004ffe <_svfiprintf_r+0x36>
 8004fe0:	2140      	movs	r1, #64	@ 0x40
 8004fe2:	f7ff ff09 	bl	8004df8 <_malloc_r>
 8004fe6:	6028      	str	r0, [r5, #0]
 8004fe8:	6128      	str	r0, [r5, #16]
 8004fea:	b930      	cbnz	r0, 8004ffa <_svfiprintf_r+0x32>
 8004fec:	230c      	movs	r3, #12
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	b01d      	add	sp, #116	@ 0x74
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	2340      	movs	r3, #64	@ 0x40
 8004ffc:	616b      	str	r3, [r5, #20]
 8004ffe:	2300      	movs	r3, #0
 8005000:	9309      	str	r3, [sp, #36]	@ 0x24
 8005002:	2320      	movs	r3, #32
 8005004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005008:	2330      	movs	r3, #48	@ 0x30
 800500a:	f04f 0901 	mov.w	r9, #1
 800500e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005012:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80051ac <_svfiprintf_r+0x1e4>
 8005016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800501a:	4623      	mov	r3, r4
 800501c:	469a      	mov	sl, r3
 800501e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005022:	b10a      	cbz	r2, 8005028 <_svfiprintf_r+0x60>
 8005024:	2a25      	cmp	r2, #37	@ 0x25
 8005026:	d1f9      	bne.n	800501c <_svfiprintf_r+0x54>
 8005028:	ebba 0b04 	subs.w	fp, sl, r4
 800502c:	d00b      	beq.n	8005046 <_svfiprintf_r+0x7e>
 800502e:	465b      	mov	r3, fp
 8005030:	4622      	mov	r2, r4
 8005032:	4629      	mov	r1, r5
 8005034:	4638      	mov	r0, r7
 8005036:	f7ff ff6b 	bl	8004f10 <__ssputs_r>
 800503a:	3001      	adds	r0, #1
 800503c:	f000 80a7 	beq.w	800518e <_svfiprintf_r+0x1c6>
 8005040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005042:	445a      	add	r2, fp
 8005044:	9209      	str	r2, [sp, #36]	@ 0x24
 8005046:	f89a 3000 	ldrb.w	r3, [sl]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 809f 	beq.w	800518e <_svfiprintf_r+0x1c6>
 8005050:	2300      	movs	r3, #0
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800505a:	f10a 0a01 	add.w	sl, sl, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	9307      	str	r3, [sp, #28]
 8005062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005066:	931a      	str	r3, [sp, #104]	@ 0x68
 8005068:	4654      	mov	r4, sl
 800506a:	2205      	movs	r2, #5
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	484e      	ldr	r0, [pc, #312]	@ (80051ac <_svfiprintf_r+0x1e4>)
 8005072:	f000 fa61 	bl	8005538 <memchr>
 8005076:	9a04      	ldr	r2, [sp, #16]
 8005078:	b9d8      	cbnz	r0, 80050b2 <_svfiprintf_r+0xea>
 800507a:	06d0      	lsls	r0, r2, #27
 800507c:	bf44      	itt	mi
 800507e:	2320      	movmi	r3, #32
 8005080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005084:	0711      	lsls	r1, r2, #28
 8005086:	bf44      	itt	mi
 8005088:	232b      	movmi	r3, #43	@ 0x2b
 800508a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508e:	f89a 3000 	ldrb.w	r3, [sl]
 8005092:	2b2a      	cmp	r3, #42	@ 0x2a
 8005094:	d015      	beq.n	80050c2 <_svfiprintf_r+0xfa>
 8005096:	4654      	mov	r4, sl
 8005098:	2000      	movs	r0, #0
 800509a:	f04f 0c0a 	mov.w	ip, #10
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	4621      	mov	r1, r4
 80050a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a6:	3b30      	subs	r3, #48	@ 0x30
 80050a8:	2b09      	cmp	r3, #9
 80050aa:	d94b      	bls.n	8005144 <_svfiprintf_r+0x17c>
 80050ac:	b1b0      	cbz	r0, 80050dc <_svfiprintf_r+0x114>
 80050ae:	9207      	str	r2, [sp, #28]
 80050b0:	e014      	b.n	80050dc <_svfiprintf_r+0x114>
 80050b2:	eba0 0308 	sub.w	r3, r0, r8
 80050b6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	46a2      	mov	sl, r4
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	e7d2      	b.n	8005068 <_svfiprintf_r+0xa0>
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	1d19      	adds	r1, r3, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	9103      	str	r1, [sp, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfbb      	ittet	lt
 80050ce:	425b      	neglt	r3, r3
 80050d0:	f042 0202 	orrlt.w	r2, r2, #2
 80050d4:	9307      	strge	r3, [sp, #28]
 80050d6:	9307      	strlt	r3, [sp, #28]
 80050d8:	bfb8      	it	lt
 80050da:	9204      	strlt	r2, [sp, #16]
 80050dc:	7823      	ldrb	r3, [r4, #0]
 80050de:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e0:	d10a      	bne.n	80050f8 <_svfiprintf_r+0x130>
 80050e2:	7863      	ldrb	r3, [r4, #1]
 80050e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e6:	d132      	bne.n	800514e <_svfiprintf_r+0x186>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	3402      	adds	r4, #2
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	9203      	str	r2, [sp, #12]
 80050f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80051b0 <_svfiprintf_r+0x1e8>
 80050fc:	2203      	movs	r2, #3
 80050fe:	4650      	mov	r0, sl
 8005100:	7821      	ldrb	r1, [r4, #0]
 8005102:	f000 fa19 	bl	8005538 <memchr>
 8005106:	b138      	cbz	r0, 8005118 <_svfiprintf_r+0x150>
 8005108:	2240      	movs	r2, #64	@ 0x40
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	eba0 000a 	sub.w	r0, r0, sl
 8005110:	4082      	lsls	r2, r0
 8005112:	4313      	orrs	r3, r2
 8005114:	3401      	adds	r4, #1
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511c:	2206      	movs	r2, #6
 800511e:	4825      	ldr	r0, [pc, #148]	@ (80051b4 <_svfiprintf_r+0x1ec>)
 8005120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005124:	f000 fa08 	bl	8005538 <memchr>
 8005128:	2800      	cmp	r0, #0
 800512a:	d036      	beq.n	800519a <_svfiprintf_r+0x1d2>
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <_svfiprintf_r+0x1f0>)
 800512e:	bb1b      	cbnz	r3, 8005178 <_svfiprintf_r+0x1b0>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	3307      	adds	r3, #7
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	3308      	adds	r3, #8
 800513a:	9303      	str	r3, [sp, #12]
 800513c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513e:	4433      	add	r3, r6
 8005140:	9309      	str	r3, [sp, #36]	@ 0x24
 8005142:	e76a      	b.n	800501a <_svfiprintf_r+0x52>
 8005144:	460c      	mov	r4, r1
 8005146:	2001      	movs	r0, #1
 8005148:	fb0c 3202 	mla	r2, ip, r2, r3
 800514c:	e7a8      	b.n	80050a0 <_svfiprintf_r+0xd8>
 800514e:	2300      	movs	r3, #0
 8005150:	f04f 0c0a 	mov.w	ip, #10
 8005154:	4619      	mov	r1, r3
 8005156:	3401      	adds	r4, #1
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	4620      	mov	r0, r4
 800515c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005160:	3a30      	subs	r2, #48	@ 0x30
 8005162:	2a09      	cmp	r2, #9
 8005164:	d903      	bls.n	800516e <_svfiprintf_r+0x1a6>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0c6      	beq.n	80050f8 <_svfiprintf_r+0x130>
 800516a:	9105      	str	r1, [sp, #20]
 800516c:	e7c4      	b.n	80050f8 <_svfiprintf_r+0x130>
 800516e:	4604      	mov	r4, r0
 8005170:	2301      	movs	r3, #1
 8005172:	fb0c 2101 	mla	r1, ip, r1, r2
 8005176:	e7f0      	b.n	800515a <_svfiprintf_r+0x192>
 8005178:	ab03      	add	r3, sp, #12
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	462a      	mov	r2, r5
 800517e:	4638      	mov	r0, r7
 8005180:	4b0e      	ldr	r3, [pc, #56]	@ (80051bc <_svfiprintf_r+0x1f4>)
 8005182:	a904      	add	r1, sp, #16
 8005184:	f3af 8000 	nop.w
 8005188:	1c42      	adds	r2, r0, #1
 800518a:	4606      	mov	r6, r0
 800518c:	d1d6      	bne.n	800513c <_svfiprintf_r+0x174>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	065b      	lsls	r3, r3, #25
 8005192:	f53f af2d 	bmi.w	8004ff0 <_svfiprintf_r+0x28>
 8005196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005198:	e72c      	b.n	8004ff4 <_svfiprintf_r+0x2c>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4638      	mov	r0, r7
 80051a2:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <_svfiprintf_r+0x1f4>)
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	f000 f87d 	bl	80052a4 <_printf_i>
 80051aa:	e7ed      	b.n	8005188 <_svfiprintf_r+0x1c0>
 80051ac:	08005762 	.word	0x08005762
 80051b0:	08005768 	.word	0x08005768
 80051b4:	0800576c 	.word	0x0800576c
 80051b8:	00000000 	.word	0x00000000
 80051bc:	08004f11 	.word	0x08004f11

080051c0 <_printf_common>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	4698      	mov	r8, r3
 80051c8:	688a      	ldr	r2, [r1, #8]
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	4607      	mov	r7, r0
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bfb8      	it	lt
 80051d2:	4613      	movlt	r3, r2
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051da:	460c      	mov	r4, r1
 80051dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051e0:	b10a      	cbz	r2, 80051e6 <_printf_common+0x26>
 80051e2:	3301      	adds	r3, #1
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	0699      	lsls	r1, r3, #26
 80051ea:	bf42      	ittt	mi
 80051ec:	6833      	ldrmi	r3, [r6, #0]
 80051ee:	3302      	addmi	r3, #2
 80051f0:	6033      	strmi	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d106      	bne.n	8005208 <_printf_common+0x48>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	6832      	ldr	r2, [r6, #0]
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	42ab      	cmp	r3, r5
 8005206:	dc2b      	bgt.n	8005260 <_printf_common+0xa0>
 8005208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	3b00      	subs	r3, #0
 8005210:	bf18      	it	ne
 8005212:	2301      	movne	r3, #1
 8005214:	0692      	lsls	r2, r2, #26
 8005216:	d430      	bmi.n	800527a <_printf_common+0xba>
 8005218:	4641      	mov	r1, r8
 800521a:	4638      	mov	r0, r7
 800521c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005220:	47c8      	blx	r9
 8005222:	3001      	adds	r0, #1
 8005224:	d023      	beq.n	800526e <_printf_common+0xae>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf14      	ite	ne
 8005232:	2500      	movne	r5, #0
 8005234:	6833      	ldreq	r3, [r6, #0]
 8005236:	f04f 0600 	mov.w	r6, #0
 800523a:	bf08      	it	eq
 800523c:	68e5      	ldreq	r5, [r4, #12]
 800523e:	f104 041a 	add.w	r4, r4, #26
 8005242:	bf08      	it	eq
 8005244:	1aed      	subeq	r5, r5, r3
 8005246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800524a:	bf08      	it	eq
 800524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005250:	4293      	cmp	r3, r2
 8005252:	bfc4      	itt	gt
 8005254:	1a9b      	subgt	r3, r3, r2
 8005256:	18ed      	addgt	r5, r5, r3
 8005258:	42b5      	cmp	r5, r6
 800525a:	d11a      	bne.n	8005292 <_printf_common+0xd2>
 800525c:	2000      	movs	r0, #0
 800525e:	e008      	b.n	8005272 <_printf_common+0xb2>
 8005260:	2301      	movs	r3, #1
 8005262:	4652      	mov	r2, sl
 8005264:	4641      	mov	r1, r8
 8005266:	4638      	mov	r0, r7
 8005268:	47c8      	blx	r9
 800526a:	3001      	adds	r0, #1
 800526c:	d103      	bne.n	8005276 <_printf_common+0xb6>
 800526e:	f04f 30ff 	mov.w	r0, #4294967295
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	3501      	adds	r5, #1
 8005278:	e7c1      	b.n	80051fe <_printf_common+0x3e>
 800527a:	2030      	movs	r0, #48	@ 0x30
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005288:	4422      	add	r2, r4
 800528a:	3302      	adds	r3, #2
 800528c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005290:	e7c2      	b.n	8005218 <_printf_common+0x58>
 8005292:	2301      	movs	r3, #1
 8005294:	4622      	mov	r2, r4
 8005296:	4641      	mov	r1, r8
 8005298:	4638      	mov	r0, r7
 800529a:	47c8      	blx	r9
 800529c:	3001      	adds	r0, #1
 800529e:	d0e6      	beq.n	800526e <_printf_common+0xae>
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7d9      	b.n	8005258 <_printf_common+0x98>

080052a4 <_printf_i>:
 80052a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	7e0f      	ldrb	r7, [r1, #24]
 80052aa:	4691      	mov	r9, r2
 80052ac:	2f78      	cmp	r7, #120	@ 0x78
 80052ae:	4680      	mov	r8, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	469a      	mov	sl, r3
 80052b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ba:	d807      	bhi.n	80052cc <_printf_i+0x28>
 80052bc:	2f62      	cmp	r7, #98	@ 0x62
 80052be:	d80a      	bhi.n	80052d6 <_printf_i+0x32>
 80052c0:	2f00      	cmp	r7, #0
 80052c2:	f000 80d3 	beq.w	800546c <_printf_i+0x1c8>
 80052c6:	2f58      	cmp	r7, #88	@ 0x58
 80052c8:	f000 80ba 	beq.w	8005440 <_printf_i+0x19c>
 80052cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052d4:	e03a      	b.n	800534c <_printf_i+0xa8>
 80052d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052da:	2b15      	cmp	r3, #21
 80052dc:	d8f6      	bhi.n	80052cc <_printf_i+0x28>
 80052de:	a101      	add	r1, pc, #4	@ (adr r1, 80052e4 <_printf_i+0x40>)
 80052e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e4:	0800533d 	.word	0x0800533d
 80052e8:	08005351 	.word	0x08005351
 80052ec:	080052cd 	.word	0x080052cd
 80052f0:	080052cd 	.word	0x080052cd
 80052f4:	080052cd 	.word	0x080052cd
 80052f8:	080052cd 	.word	0x080052cd
 80052fc:	08005351 	.word	0x08005351
 8005300:	080052cd 	.word	0x080052cd
 8005304:	080052cd 	.word	0x080052cd
 8005308:	080052cd 	.word	0x080052cd
 800530c:	080052cd 	.word	0x080052cd
 8005310:	08005453 	.word	0x08005453
 8005314:	0800537b 	.word	0x0800537b
 8005318:	0800540d 	.word	0x0800540d
 800531c:	080052cd 	.word	0x080052cd
 8005320:	080052cd 	.word	0x080052cd
 8005324:	08005475 	.word	0x08005475
 8005328:	080052cd 	.word	0x080052cd
 800532c:	0800537b 	.word	0x0800537b
 8005330:	080052cd 	.word	0x080052cd
 8005334:	080052cd 	.word	0x080052cd
 8005338:	08005415 	.word	0x08005415
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6032      	str	r2, [r6, #0]
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800534c:	2301      	movs	r3, #1
 800534e:	e09e      	b.n	800548e <_printf_i+0x1ea>
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	6031      	str	r1, [r6, #0]
 8005358:	0606      	lsls	r6, r0, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xbc>
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	e003      	b.n	8005368 <_printf_i+0xc4>
 8005360:	0645      	lsls	r5, r0, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xb8>
 8005364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005368:	2d00      	cmp	r5, #0
 800536a:	da03      	bge.n	8005374 <_printf_i+0xd0>
 800536c:	232d      	movs	r3, #45	@ 0x2d
 800536e:	426d      	negs	r5, r5
 8005370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005374:	230a      	movs	r3, #10
 8005376:	4859      	ldr	r0, [pc, #356]	@ (80054dc <_printf_i+0x238>)
 8005378:	e011      	b.n	800539e <_printf_i+0xfa>
 800537a:	6821      	ldr	r1, [r4, #0]
 800537c:	6833      	ldr	r3, [r6, #0]
 800537e:	0608      	lsls	r0, r1, #24
 8005380:	f853 5b04 	ldr.w	r5, [r3], #4
 8005384:	d402      	bmi.n	800538c <_printf_i+0xe8>
 8005386:	0649      	lsls	r1, r1, #25
 8005388:	bf48      	it	mi
 800538a:	b2ad      	uxthmi	r5, r5
 800538c:	2f6f      	cmp	r7, #111	@ 0x6f
 800538e:	6033      	str	r3, [r6, #0]
 8005390:	bf14      	ite	ne
 8005392:	230a      	movne	r3, #10
 8005394:	2308      	moveq	r3, #8
 8005396:	4851      	ldr	r0, [pc, #324]	@ (80054dc <_printf_i+0x238>)
 8005398:	2100      	movs	r1, #0
 800539a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800539e:	6866      	ldr	r6, [r4, #4]
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	bfa8      	it	ge
 80053a4:	6821      	ldrge	r1, [r4, #0]
 80053a6:	60a6      	str	r6, [r4, #8]
 80053a8:	bfa4      	itt	ge
 80053aa:	f021 0104 	bicge.w	r1, r1, #4
 80053ae:	6021      	strge	r1, [r4, #0]
 80053b0:	b90d      	cbnz	r5, 80053b6 <_printf_i+0x112>
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	d04b      	beq.n	800544e <_printf_i+0x1aa>
 80053b6:	4616      	mov	r6, r2
 80053b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053bc:	fb03 5711 	mls	r7, r3, r1, r5
 80053c0:	5dc7      	ldrb	r7, [r0, r7]
 80053c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053c6:	462f      	mov	r7, r5
 80053c8:	42bb      	cmp	r3, r7
 80053ca:	460d      	mov	r5, r1
 80053cc:	d9f4      	bls.n	80053b8 <_printf_i+0x114>
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d10b      	bne.n	80053ea <_printf_i+0x146>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	07df      	lsls	r7, r3, #31
 80053d6:	d508      	bpl.n	80053ea <_printf_i+0x146>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	4299      	cmp	r1, r3
 80053de:	bfde      	ittt	le
 80053e0:	2330      	movle	r3, #48	@ 0x30
 80053e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ea:	1b92      	subs	r2, r2, r6
 80053ec:	6122      	str	r2, [r4, #16]
 80053ee:	464b      	mov	r3, r9
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f8cd a000 	str.w	sl, [sp]
 80053f8:	aa03      	add	r2, sp, #12
 80053fa:	f7ff fee1 	bl	80051c0 <_printf_common>
 80053fe:	3001      	adds	r0, #1
 8005400:	d14a      	bne.n	8005498 <_printf_i+0x1f4>
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b004      	add	sp, #16
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	f043 0320 	orr.w	r3, r3, #32
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	2778      	movs	r7, #120	@ 0x78
 8005416:	4832      	ldr	r0, [pc, #200]	@ (80054e0 <_printf_i+0x23c>)
 8005418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	061f      	lsls	r7, r3, #24
 8005422:	f851 5b04 	ldr.w	r5, [r1], #4
 8005426:	d402      	bmi.n	800542e <_printf_i+0x18a>
 8005428:	065f      	lsls	r7, r3, #25
 800542a:	bf48      	it	mi
 800542c:	b2ad      	uxthmi	r5, r5
 800542e:	6031      	str	r1, [r6, #0]
 8005430:	07d9      	lsls	r1, r3, #31
 8005432:	bf44      	itt	mi
 8005434:	f043 0320 	orrmi.w	r3, r3, #32
 8005438:	6023      	strmi	r3, [r4, #0]
 800543a:	b11d      	cbz	r5, 8005444 <_printf_i+0x1a0>
 800543c:	2310      	movs	r3, #16
 800543e:	e7ab      	b.n	8005398 <_printf_i+0xf4>
 8005440:	4826      	ldr	r0, [pc, #152]	@ (80054dc <_printf_i+0x238>)
 8005442:	e7e9      	b.n	8005418 <_printf_i+0x174>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	e7f6      	b.n	800543c <_printf_i+0x198>
 800544e:	4616      	mov	r6, r2
 8005450:	e7bd      	b.n	80053ce <_printf_i+0x12a>
 8005452:	6833      	ldr	r3, [r6, #0]
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1d18      	adds	r0, r3, #4
 8005458:	6961      	ldr	r1, [r4, #20]
 800545a:	6030      	str	r0, [r6, #0]
 800545c:	062e      	lsls	r6, r5, #24
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	d501      	bpl.n	8005466 <_printf_i+0x1c2>
 8005462:	6019      	str	r1, [r3, #0]
 8005464:	e002      	b.n	800546c <_printf_i+0x1c8>
 8005466:	0668      	lsls	r0, r5, #25
 8005468:	d5fb      	bpl.n	8005462 <_printf_i+0x1be>
 800546a:	8019      	strh	r1, [r3, #0]
 800546c:	2300      	movs	r3, #0
 800546e:	4616      	mov	r6, r2
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	e7bc      	b.n	80053ee <_printf_i+0x14a>
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	2100      	movs	r1, #0
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	6032      	str	r2, [r6, #0]
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f859 	bl	8005538 <memchr>
 8005486:	b108      	cbz	r0, 800548c <_printf_i+0x1e8>
 8005488:	1b80      	subs	r0, r0, r6
 800548a:	6060      	str	r0, [r4, #4]
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	2300      	movs	r3, #0
 8005492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005496:	e7aa      	b.n	80053ee <_printf_i+0x14a>
 8005498:	4632      	mov	r2, r6
 800549a:	4649      	mov	r1, r9
 800549c:	4640      	mov	r0, r8
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	47d0      	blx	sl
 80054a2:	3001      	adds	r0, #1
 80054a4:	d0ad      	beq.n	8005402 <_printf_i+0x15e>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	d413      	bmi.n	80054d4 <_printf_i+0x230>
 80054ac:	68e0      	ldr	r0, [r4, #12]
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	4298      	cmp	r0, r3
 80054b2:	bfb8      	it	lt
 80054b4:	4618      	movlt	r0, r3
 80054b6:	e7a6      	b.n	8005406 <_printf_i+0x162>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4632      	mov	r2, r6
 80054bc:	4649      	mov	r1, r9
 80054be:	4640      	mov	r0, r8
 80054c0:	47d0      	blx	sl
 80054c2:	3001      	adds	r0, #1
 80054c4:	d09d      	beq.n	8005402 <_printf_i+0x15e>
 80054c6:	3501      	adds	r5, #1
 80054c8:	68e3      	ldr	r3, [r4, #12]
 80054ca:	9903      	ldr	r1, [sp, #12]
 80054cc:	1a5b      	subs	r3, r3, r1
 80054ce:	42ab      	cmp	r3, r5
 80054d0:	dcf2      	bgt.n	80054b8 <_printf_i+0x214>
 80054d2:	e7eb      	b.n	80054ac <_printf_i+0x208>
 80054d4:	2500      	movs	r5, #0
 80054d6:	f104 0619 	add.w	r6, r4, #25
 80054da:	e7f5      	b.n	80054c8 <_printf_i+0x224>
 80054dc:	08005773 	.word	0x08005773
 80054e0:	08005784 	.word	0x08005784

080054e4 <memmove>:
 80054e4:	4288      	cmp	r0, r1
 80054e6:	b510      	push	{r4, lr}
 80054e8:	eb01 0402 	add.w	r4, r1, r2
 80054ec:	d902      	bls.n	80054f4 <memmove+0x10>
 80054ee:	4284      	cmp	r4, r0
 80054f0:	4623      	mov	r3, r4
 80054f2:	d807      	bhi.n	8005504 <memmove+0x20>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	42a1      	cmp	r1, r4
 80054f8:	d008      	beq.n	800550c <memmove+0x28>
 80054fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0x12>
 8005504:	4601      	mov	r1, r0
 8005506:	4402      	add	r2, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	d100      	bne.n	800550e <memmove+0x2a>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005516:	e7f7      	b.n	8005508 <memmove+0x24>

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	2300      	movs	r3, #0
 800551c:	4d05      	ldr	r5, [pc, #20]	@ (8005534 <_sbrk_r+0x1c>)
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fc fa10 	bl	8001948 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200004cc 	.word	0x200004cc

08005538 <memchr>:
 8005538:	4603      	mov	r3, r0
 800553a:	b510      	push	{r4, lr}
 800553c:	b2c9      	uxtb	r1, r1
 800553e:	4402      	add	r2, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	4618      	mov	r0, r3
 8005544:	d101      	bne.n	800554a <memchr+0x12>
 8005546:	2000      	movs	r0, #0
 8005548:	e003      	b.n	8005552 <memchr+0x1a>
 800554a:	7804      	ldrb	r4, [r0, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	428c      	cmp	r4, r1
 8005550:	d1f6      	bne.n	8005540 <memchr+0x8>
 8005552:	bd10      	pop	{r4, pc}

08005554 <memcpy>:
 8005554:	440a      	add	r2, r1
 8005556:	4291      	cmp	r1, r2
 8005558:	f100 33ff 	add.w	r3, r0, #4294967295
 800555c:	d100      	bne.n	8005560 <memcpy+0xc>
 800555e:	4770      	bx	lr
 8005560:	b510      	push	{r4, lr}
 8005562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005566:	4291      	cmp	r1, r2
 8005568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556c:	d1f9      	bne.n	8005562 <memcpy+0xe>
 800556e:	bd10      	pop	{r4, pc}

08005570 <_realloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	4680      	mov	r8, r0
 8005576:	4615      	mov	r5, r2
 8005578:	460c      	mov	r4, r1
 800557a:	b921      	cbnz	r1, 8005586 <_realloc_r+0x16>
 800557c:	4611      	mov	r1, r2
 800557e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	f7ff bc39 	b.w	8004df8 <_malloc_r>
 8005586:	b92a      	cbnz	r2, 8005594 <_realloc_r+0x24>
 8005588:	f7ff fbcc 	bl	8004d24 <_free_r>
 800558c:	2400      	movs	r4, #0
 800558e:	4620      	mov	r0, r4
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005594:	f000 f81a 	bl	80055cc <_malloc_usable_size_r>
 8005598:	4285      	cmp	r5, r0
 800559a:	4606      	mov	r6, r0
 800559c:	d802      	bhi.n	80055a4 <_realloc_r+0x34>
 800559e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055a2:	d8f4      	bhi.n	800558e <_realloc_r+0x1e>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4640      	mov	r0, r8
 80055a8:	f7ff fc26 	bl	8004df8 <_malloc_r>
 80055ac:	4607      	mov	r7, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0ec      	beq.n	800558c <_realloc_r+0x1c>
 80055b2:	42b5      	cmp	r5, r6
 80055b4:	462a      	mov	r2, r5
 80055b6:	4621      	mov	r1, r4
 80055b8:	bf28      	it	cs
 80055ba:	4632      	movcs	r2, r6
 80055bc:	f7ff ffca 	bl	8005554 <memcpy>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7ff fbae 	bl	8004d24 <_free_r>
 80055c8:	463c      	mov	r4, r7
 80055ca:	e7e0      	b.n	800558e <_realloc_r+0x1e>

080055cc <_malloc_usable_size_r>:
 80055cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d0:	1f18      	subs	r0, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbc      	itt	lt
 80055d6:	580b      	ldrlt	r3, [r1, r0]
 80055d8:	18c0      	addlt	r0, r0, r3
 80055da:	4770      	bx	lr

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
